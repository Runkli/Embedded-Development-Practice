
UserModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800118  00800118  0000050e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebd  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000950  00000000  00000000  000014b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000619  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054a  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000695  00000000  00000000  00002b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000031c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	30 c1       	rjmp	.+608    	; 0x266 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3a c1       	rjmp	.+628    	; 0x2ee <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c6 d1       	rcall	.+908    	; 0x450 <main>
  c4:	cc c1       	rjmp	.+920    	; 0x45e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <send_LCD>:
	PORTD |= (1<<5); // setting rs to 1
	send_LCD(command); // 0010 0000
}

void send_LCD(unsigned char data) {
	PORTE = data;
  c8:	83 b9       	out	0x03, r24	; 3
	PORTD |= (1<<7); // 1000 0000 send pulse to E
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	85 e8       	ldi	r24, 0x85	; 133
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <send_LCD+0xa>
  d6:	00 00       	nop
	_delay_us(100);
	PORTD &= ~(1<<7); // turn E pulse off
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 77       	andi	r24, 0x7F	; 127
  dc:	82 bb       	out	0x12, r24	; 18
  de:	85 e8       	ldi	r24, 0x85	; 133
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <send_LCD+0x18>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <command_LCD>:
	command_LCD(0x01); // clear display screen
	_delay_us(1000);
}

void command_LCD(unsigned char command) {
	PORTD &= ~(1<<5); // setting rs to 0
  e8:	92 b3       	in	r25, 0x12	; 18
  ea:	9f 7d       	andi	r25, 0xDF	; 223
  ec:	92 bb       	out	0x12, r25	; 18
	send_LCD(command); // 0000 0000 RS=0, RW=0
  ee:	ec cf       	rjmp	.-40     	; 0xc8 <send_LCD>
  f0:	08 95       	ret

000000f2 <set_line_LCD>:
void data_LCD(unsigned char);
void send_LCD(unsigned char);
void write_string_LCD(char*, char);

void set_line_LCD(char line){
	switch (line){
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	49 f0       	breq	.+18     	; 0x108 <set_line_LCD+0x16>
  f6:	28 f0       	brcs	.+10     	; 0x102 <set_line_LCD+0x10>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	49 f0       	breq	.+18     	; 0x10e <set_line_LCD+0x1c>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	51 f0       	breq	.+20     	; 0x114 <set_line_LCD+0x22>
 100:	0b c0       	rjmp	.+22     	; 0x118 <set_line_LCD+0x26>
		case 0:
		command_LCD(0x80);
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	f1 df       	rcall	.-30     	; 0xe8 <command_LCD>
		break;
 106:	08 c0       	rjmp	.+16     	; 0x118 <set_line_LCD+0x26>
		case 1:
		command_LCD(0xC0);
 108:	80 ec       	ldi	r24, 0xC0	; 192
 10a:	ee df       	rcall	.-36     	; 0xe8 <command_LCD>
		break;
		case 2:
		command_LCD(0x94);
 10c:	05 c0       	rjmp	.+10     	; 0x118 <set_line_LCD+0x26>
 10e:	84 e9       	ldi	r24, 0x94	; 148
		break;
 110:	eb df       	rcall	.-42     	; 0xe8 <command_LCD>
		case 3:
		command_LCD(0xD4);
 112:	02 c0       	rjmp	.+4      	; 0x118 <set_line_LCD+0x26>
 114:	84 ed       	ldi	r24, 0xD4	; 212
 116:	e8 df       	rcall	.-48     	; 0xe8 <command_LCD>
 118:	87 ee       	ldi	r24, 0xE7	; 231
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <set_line_LCD+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <set_line_LCD+0x30>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <clear_LCD>:
		data_LCD(array[x]);
	}
}

void clear_LCD() {
	command_LCD(0x01); // clear display screen
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	df df       	rcall	.-66     	; 0xe8 <command_LCD>
 12a:	87 ee       	ldi	r24, 0xE7	; 231
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <clear_LCD+0x8>
 132:	00 c0       	rjmp	.+0      	; 0x134 <clear_LCD+0xe>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <data_LCD>:
	PORTD &= ~(1<<5); // setting rs to 0
	send_LCD(command); // 0000 0000 RS=0, RW=0
}

void data_LCD(unsigned char command) {
	PORTD |= (1<<5); // setting rs to 1
 138:	92 b3       	in	r25, 0x12	; 18
 13a:	90 62       	ori	r25, 0x20	; 32
 13c:	92 bb       	out	0x12, r25	; 18
	send_LCD(command); // 0010 0000
 13e:	c4 cf       	rjmp	.-120    	; 0xc8 <send_LCD>
 140:	08 95       	ret

00000142 <write_string_LCD>:
		break;
	}
	_delay_us(1000);
}

void write_string_LCD(char str[], char line) {
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
 14e:	f6 2e       	mov	r15, r22
	set_line_LCD(line);
 150:	86 2f       	mov	r24, r22
 152:	cf df       	rcall	.-98     	; 0xf2 <set_line_LCD>
	int i = 1;
 154:	c1 e0       	ldi	r28, 0x01	; 1
 156:	d0 e0       	ldi	r29, 0x00	; 0
	for(; str[i]!='\0'; i++) {
 158:	12 c0       	rjmp	.+36     	; 0x17e <write_string_LCD+0x3c>
		if(str[i] == '~'){
 15a:	8e 37       	cpi	r24, 0x7E	; 126
 15c:	41 f4       	brne	.+16     	; 0x16e <write_string_LCD+0x2c>
			data_LCD(str[++i] - '0');
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	f8 01       	movw	r30, r16
 162:	ec 0f       	add	r30, r28
 164:	fd 1f       	adc	r31, r29
 166:	80 81       	ld	r24, Z
 168:	80 53       	subi	r24, 0x30	; 48
 16a:	e6 df       	rcall	.-52     	; 0x138 <data_LCD>
 16c:	07 c0       	rjmp	.+14     	; 0x17c <write_string_LCD+0x3a>
		}
		else if(str[i] == '\n'){
 16e:	8a 30       	cpi	r24, 0x0A	; 10
 170:	21 f4       	brne	.+8      	; 0x17a <write_string_LCD+0x38>
			set_line_LCD(++line);
 172:	f3 94       	inc	r15
 174:	8f 2d       	mov	r24, r15
 176:	bd df       	rcall	.-134    	; 0xf2 <set_line_LCD>
		}else{
			data_LCD(str[i]);
 178:	01 c0       	rjmp	.+2      	; 0x17c <write_string_LCD+0x3a>
 17a:	de df       	rcall	.-68     	; 0x138 <data_LCD>
}

void write_string_LCD(char str[], char line) {
	set_line_LCD(line);
	int i = 1;
	for(; str[i]!='\0'; i++) {
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	f8 01       	movw	r30, r16
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	80 81       	ld	r24, Z
 186:	81 11       	cpse	r24, r1
 188:	e8 cf       	rjmp	.-48     	; 0x15a <write_string_LCD+0x18>
			set_line_LCD(++line);
		}else{
			data_LCD(str[i]);
		}
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	08 95       	ret

00000196 <createCG>:


void createCG(unsigned char array[], unsigned char character){
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	8c 01       	movw	r16, r24
	unsigned char pointer = character * 8 + 0x40;
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	68 5f       	subi	r22, 0xF8	; 248
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	d6 2f       	mov	r29, r22
 1a8:	dd 0f       	add	r29, r29
 1aa:	dd 0f       	add	r29, r29
 1ac:	dd 0f       	add	r29, r29
	for(unsigned char x = 0; x < 8; x++){
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <createCG+0x2e>
		command_LCD(pointer + x);
 1b2:	8c 2f       	mov	r24, r28
 1b4:	8d 0f       	add	r24, r29
 1b6:	98 df       	rcall	.-208    	; 0xe8 <command_LCD>
		data_LCD(array[x]);
 1b8:	f8 01       	movw	r30, r16
 1ba:	ec 0f       	add	r30, r28
 1bc:	f1 1d       	adc	r31, r1
 1be:	80 81       	ld	r24, Z
 1c0:	bb df       	rcall	.-138    	; 0x138 <data_LCD>
}


void createCG(unsigned char array[], unsigned char character){
	unsigned char pointer = character * 8 + 0x40;
	for(unsigned char x = 0; x < 8; x++){
 1c2:	cf 5f       	subi	r28, 0xFF	; 255
 1c4:	c8 30       	cpi	r28, 0x08	; 8
 1c6:	a8 f3       	brcs	.-22     	; 0x1b2 <createCG+0x1c>
		command_LCD(pointer + x);
		data_LCD(array[x]);
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <keypad_to_char>:
}


char keypad_to_char() {
	char column = 0;
	switch (PINC & 0x0E) {
 1d2:	83 b3       	in	r24, 0x13	; 19
 1d4:	8e 70       	andi	r24, 0x0E	; 14
 1d6:	84 30       	cpi	r24, 0x04	; 4
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <keypad_to_char+0x14>
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <keypad_to_char+0x10>
	data_LCD(result);
}


char keypad_to_char() {
	char column = 0;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <keypad_to_char+0x16>
			break;
		case 4:
			column = 1;
			break;
		case 8:
			column = 2;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
			break;
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <keypad_to_char+0x16>
	switch (PINC & 0x0E) {
		case 2:
			column = 0;
			break;
		case 4:
			column = 1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
			column = 2;
			break;
	}
	
	char row;
	for ( row = 0; row < 4; row++ ) {
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	26 c0       	rjmp	.+76     	; 0x238 <keypad_to_char+0x66>
		PORTC &= ~(1<<(4+row));
 1ec:	45 b3       	in	r20, 0x15	; 21
 1ee:	69 2f       	mov	r22, r25
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	6c 5f       	subi	r22, 0xFC	; 252
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <keypad_to_char+0x2e>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <keypad_to_char+0x2a>
 204:	e2 2f       	mov	r30, r18
 206:	52 2f       	mov	r21, r18
 208:	50 95       	com	r21
 20a:	45 23       	and	r20, r21
 20c:	45 bb       	out	0x15, r20	; 21
		if ( (PINC&(1<<(1+column))) == 0) {
 20e:	43 b3       	in	r20, 0x13	; 19
 210:	68 2f       	mov	r22, r24
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	6f 5f       	subi	r22, 0xFF	; 255
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <keypad_to_char+0x4e>
 21c:	55 95       	asr	r21
 21e:	47 95       	ror	r20
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <keypad_to_char+0x4a>
 224:	40 fd       	sbrc	r20, 0
 226:	04 c0       	rjmp	.+8      	; 0x230 <keypad_to_char+0x5e>
			PORTC |= (1<<(4+row));
 228:	25 b3       	in	r18, 0x15	; 21
 22a:	e2 2b       	or	r30, r18
 22c:	e5 bb       	out	0x15, r30	; 21
			break;
 22e:	06 c0       	rjmp	.+12     	; 0x23c <keypad_to_char+0x6a>
		}
		
		PORTC |= (1<<(4+row));
 230:	35 b3       	in	r19, 0x15	; 21
 232:	23 2b       	or	r18, r19
 234:	25 bb       	out	0x15, r18	; 21
			column = 2;
			break;
	}
	
	char row;
	for ( row = 0; row < 4; row++ ) {
 236:	9f 5f       	subi	r25, 0xFF	; 255
 238:	94 30       	cpi	r25, 0x04	; 4
 23a:	c0 f2       	brcs	.-80     	; 0x1ec <keypad_to_char+0x1a>
		}
		
		PORTC |= (1<<(4+row));
		
	}
	return row | (column<<4);
 23c:	40 e1       	ldi	r20, 0x10	; 16
 23e:	84 9f       	mul	r24, r20
 240:	90 01       	movw	r18, r0
 242:	11 24       	eor	r1, r1
}
 244:	89 2f       	mov	r24, r25
 246:	82 2b       	or	r24, r18
 248:	08 95       	ret

0000024a <SendData>:

// transmits a single byte of data to the sensor
void SendData(unsigned char sensor_packet_out) {
	while(!(UCSR1A & (1<<UDRE1)))
 24a:	06 c0       	rjmp	.+12     	; 0x258 <SendData+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	e7 ee       	ldi	r30, 0xE7	; 231
 24e:	f3 e0       	ldi	r31, 0x03	; 3
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <SendData+0x6>
 254:	00 c0       	rjmp	.+0      	; 0x256 <SendData+0xc>
 256:	00 00       	nop
 258:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 25c:	95 ff       	sbrs	r25, 5
 25e:	f6 cf       	rjmp	.-20     	; 0x24c <SendData+0x2>
	_delay_ms(1);

	UDR1 = sensor_packet_out;
 260:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 264:	08 95       	ret

00000266 <__vector_1>:
	'6', '5', '4',
	'9', '8', '7',
	'#', '0', '.' 
};

ISR(INT0_vect) {
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	0b b6       	in	r0, 0x3b	; 59
 272:	0f 92       	push	r0
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	cf 93       	push	r28
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	sleep_disable(); // disable sleep once an interrupt wakes CPU up
 28e:	85 b7       	in	r24, 0x35	; 53
 290:	8f 7d       	andi	r24, 0xDF	; 223
 292:	85 bf       	out	0x35, r24	; 53
	char result = keypad_to_char();
 294:	9e df       	rcall	.-196    	; 0x1d2 <keypad_to_char>
	char row, col;
	row = result & 0x0F;
 296:	28 2f       	mov	r18, r24
 298:	2f 70       	andi	r18, 0x0F	; 15
	col = (result & 0xF0) >> 4;
 29a:	82 95       	swap	r24
 29c:	8f 70       	andi	r24, 0x0F	; 15
	
	result = keypad[row][col];
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	e2 0f       	add	r30, r18
 2a8:	f3 1f       	adc	r31, r19
 2aa:	ef 5f       	subi	r30, 0xFF	; 255
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	e8 0f       	add	r30, r24
 2b0:	f1 1d       	adc	r31, r1
 2b2:	c0 81       	ld	r28, Z
	
	SendData(result);
 2b4:	8c 2f       	mov	r24, r28
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	c8 df       	rcall	.-112    	; 0x24a <SendData>
	write_string_LCD(">>", 3);
 2ba:	63 e0       	ldi	r22, 0x03	; 3
 2bc:	85 e1       	ldi	r24, 0x15	; 21
 2be:	91 e0       	ldi	r25, 0x01	; 1
	data_LCD(result);
 2c0:	40 df       	rcall	.-384    	; 0x142 <write_string_LCD>
 2c2:	8c 2f       	mov	r24, r28
 2c4:	39 df       	rcall	.-398    	; 0x138 <data_LCD>
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	cf 91       	pop	r28
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0b be       	out	0x3b, r0	; 59
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_30>:
char rec_buffer_pointer = 0;
char mem_dump_pointer = 0;
char mem_dump_line = 1;

// receive data
ISR(USART1_RX_vect) {
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	0b b6       	in	r0, 0x3b	; 59
 2fa:	0f 92       	push	r0
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
	sleep_disable(); // disable sleep once an interrupt wakes CPU up
 318:	85 b7       	in	r24, 0x35	; 53
 31a:	8f 7d       	andi	r24, 0xDF	; 223
 31c:	85 bf       	out	0x35, r24	; 53
	char character = UDR1;
 31e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if(character == '>'){
 322:	8e 33       	cpi	r24, 0x3E	; 62
 324:	b1 f5       	brne	.+108    	; 0x392 <__vector_30+0xa4>
		rec_buffer[rec_buffer_pointer] = '\0';
 326:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <rec_buffer_pointer>
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	e6 5e       	subi	r30, 0xE6	; 230
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	10 82       	st	Z, r1
		rec_buffer_pointer = 0;
 332:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <rec_buffer_pointer>
		if(rec_buffer[0] == '<'){
 336:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <rec_buffer>
 33a:	8c 33       	cpi	r24, 0x3C	; 60
 33c:	59 f4       	brne	.+22     	; 0x354 <__vector_30+0x66>
			clear_LCD();
 33e:	f3 de       	rcall	.-538    	; 0x126 <clear_LCD>
			write_string_LCD(rec_buffer, 0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	8a e1       	ldi	r24, 0x1A	; 26
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	fd de       	rcall	.-518    	; 0x142 <write_string_LCD>
			mem_dump_pointer = 0;
 348:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
			mem_dump_line = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 352:	29 c0       	rjmp	.+82     	; 0x3a6 <__vector_30+0xb8>
		}
		else{// memdump sepecific
			data_LCD(rec_buffer[1]);
 354:	ca e1       	ldi	r28, 0x1A	; 26
 356:	d1 e0       	ldi	r29, 0x01	; 1
 358:	89 81       	ldd	r24, Y+1	; 0x01
			data_LCD(rec_buffer[2]);
 35a:	ee de       	rcall	.-548    	; 0x138 <data_LCD>
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
			data_LCD(rec_buffer[3]);
 35e:	ec de       	rcall	.-552    	; 0x138 <data_LCD>
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	ea de       	rcall	.-556    	; 0x138 <data_LCD>
			mem_dump_pointer += 3;
 364:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 368:	8d 5f       	subi	r24, 0xFD	; 253
 36a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
			if(mem_dump_pointer > 15){
 36e:	80 31       	cpi	r24, 0x10	; 16
 370:	d0 f0       	brcs	.+52     	; 0x3a6 <__vector_30+0xb8>
				mem_dump_pointer = 0;
 372:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
				set_line_LCD(++mem_dump_line);
 376:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				if(mem_dump_line > 3){
 380:	b8 de       	rcall	.-656    	; 0xf2 <set_line_LCD>
 382:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 386:	84 30       	cpi	r24, 0x04	; 4
					clear_LCD();
 388:	70 f0       	brcs	.+28     	; 0x3a6 <__vector_30+0xb8>
 38a:	cd de       	rcall	.-614    	; 0x126 <clear_LCD>
					mem_dump_line = 0;
 38c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 390:	0a c0       	rjmp	.+20     	; 0x3a6 <__vector_30+0xb8>
				}
			}
		}
	}else{
		rec_buffer[rec_buffer_pointer++] = character;
 392:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <rec_buffer_pointer>
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	9e 0f       	add	r25, r30
 39a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <rec_buffer_pointer>
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	e6 5e       	subi	r30, 0xE6	; 230
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	80 83       	st	Z, r24
	}
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0b be       	out	0x3b, r0	; 59
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <configure>:

void configure() {
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	28 97       	sbiw	r28, 0x08	; 8
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
	
	// BlueTooth USART
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10); // setting data width to 8
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = (BR_Calc>>8); // setting baud rate to 9600 by setting UBBR
 3ea:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = BR_Calc;
 3ee:	8a e1       	ldi	r24, 0x1A	; 26
 3f0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1<<TXEN1) | (1<<RXCIE1) | (1<<RXEN1);; // enable transmitter, receiver, and receive and transmit complete interrupts	
 3f4:	88 e9       	ldi	r24, 0x98	; 152
 3f6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	sei();
 3fa:	78 94       	sei
	
	// LCD config
	DDRE = 0xFF; // data pins
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xE0; // 11100000 for RS/RW/E
 400:	80 ee       	ldi	r24, 0xE0	; 224
 402:	81 bb       	out	0x11, r24	; 17
	
	command_LCD(0x38); // 00111000 sets 8 bit mode
 404:	88 e3       	ldi	r24, 0x38	; 56
 406:	70 de       	rcall	.-800    	; 0xe8 <command_LCD>
	command_LCD(0x0C); // 00001100 display on cursor off
 408:	8c e0       	ldi	r24, 0x0C	; 12
 40a:	6e de       	rcall	.-804    	; 0xe8 <command_LCD>
	command_LCD(0x06); // shift cursor to the right command
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	6c de       	rcall	.-808    	; 0xe8 <command_LCD>
 410:	80 ef       	ldi	r24, 0xF0	; 240
	
	
	// Keypad config
	DDRC = 0xF0; // keypad inputs
 412:	84 bb       	out	0x14, r24	; 20
 414:	85 bb       	out	0x15, r24	; 21
	PORTC = 0xF0; // pull up
 416:	81 e0       	ldi	r24, 0x01	; 1
	
	
	// keypad interrupt
	EIMSK = 0x01; // normal mode, falling edge
 418:	89 bf       	out	0x39, r24	; 57
 41a:	ea e6       	ldi	r30, 0x6A	; 106
	EICRA |= (1<<1);
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	82 60       	ori	r24, 0x02	; 2
 422:	80 83       	st	Z, r24
 424:	88 e0       	ldi	r24, 0x08	; 8
	
	// custom character
	// envelop
	unsigned char arrow[] = {
 426:	ed e0       	ldi	r30, 0x0D	; 13
 428:	f1 e0       	ldi	r31, 0x01	; 1
 42a:	de 01       	movw	r26, r28
 42c:	11 96       	adiw	r26, 0x01	; 1
 42e:	01 90       	ld	r0, Z+
 430:	0d 92       	st	X+, r0
 432:	8a 95       	dec	r24
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	60 e0       	ldi	r22, 0x00	; 0
		0b00010,
		0b00100,
		0b00000
	 };
	//unsigned char envelope[] = { 0x7E, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x7E, 0x00 };
	createCG(arrow, 0);
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	ac de       	rcall	.-680    	; 0x196 <createCG>
 43e:	28 96       	adiw	r28, 0x08	; 8
}
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <main>:
 450:	bf df       	rcall	.-130    	; 0x3d0 <configure>

int main(void) {
	configure();
    /* Replace with your application code */
    while (1) {
	    sei();// waits for user or sensor interrupts
 452:	78 94       	sei
	    sleep_enable(); // arm sleep mode
 454:	85 b7       	in	r24, 0x35	; 53
 456:	80 62       	ori	r24, 0x20	; 32
 458:	85 bf       	out	0x35, r24	; 53
	    sleep_cpu(); // put CPU to sleep
 45a:	88 95       	sleep
 45c:	fa cf       	rjmp	.-12     	; 0x452 <main+0x2>

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
