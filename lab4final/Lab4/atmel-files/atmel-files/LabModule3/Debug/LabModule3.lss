
LabModule3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  00000af2  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d94  008001e2  008001e2  00000c68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f5  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaf  00000000  00000000  000026c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c89  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00003dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072a  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000100c  00000000  00000000  000048d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000058e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
  36:	00 00       	nop
  38:	f9 c2       	rjmp	.+1522   	; 0x62c <__vector_14>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c4       	rjmp	.+2260   	; 0x91e <__vector_18>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	77 c1       	rjmp	.+750    	; 0x340 <__vector_20>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	29 c1       	rjmp	.+594    	; 0x2c8 <__vector_29>
  76:	00 00       	nop
  78:	48 c3       	rjmp	.+1680   	; 0x70a <__vector_30>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	87 04       	cpc	r8, r7
  8e:	87 04       	cpc	r8, r7
  90:	83 04       	cpc	r8, r3
  92:	70 04       	cpc	r7, r0
  94:	85 04       	cpc	r8, r5
  96:	72 04       	cpc	r7, r2
  98:	74 04       	cpc	r7, r4
  9a:	76 04       	cpc	r7, r6
  9c:	78 04       	cpc	r7, r8

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e1       	ldi	r29, 0x10	; 16
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	e2 ef       	ldi	r30, 0xF2	; 242
  b2:	fa e0       	ldi	r31, 0x0A	; 10
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 3e       	cpi	r26, 0xE2	; 226
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	2f e0       	ldi	r18, 0x0F	; 15
  c6:	a2 ee       	ldi	r26, 0xE2	; 226
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a6 37       	cpi	r26, 0x76	; 118
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	d6 d4       	rcall	.+2476   	; 0xa82 <main>
  d6:	0b c5       	rjmp	.+2582   	; 0xaee <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <CRC3>:
	number += (buffer[1] - 'a' + 10);
	else if(buffer[1] >= 'A' && buffer[1] <= 'F')
	number += (buffer[1] - 'A' + 10);
	
	return number;
}
  da:	98 2f       	mov	r25, r24
  dc:	90 7e       	andi	r25, 0xE0	; 224
  de:	96 95       	lsr	r25
  e0:	96 95       	lsr	r25
  e2:	90 32       	cpi	r25, 0x20	; 32
  e4:	38 f0       	brcs	.+14     	; 0xf4 <CRC3+0x1a>
  e6:	25 e3       	ldi	r18, 0x35	; 53
  e8:	92 27       	eor	r25, r18
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <CRC3+0x1a>
  ec:	25 e3       	ldi	r18, 0x35	; 53
  ee:	92 27       	eor	r25, r18
  f0:	89 2b       	or	r24, r25
  f2:	08 95       	ret
  f4:	99 0f       	add	r25, r25
  f6:	90 32       	cpi	r25, 0x20	; 32
  f8:	10 f0       	brcs	.+4      	; 0xfe <CRC3+0x24>
  fa:	25 e3       	ldi	r18, 0x35	; 53
  fc:	92 27       	eor	r25, r18
  fe:	99 0f       	add	r25, r25
 100:	90 32       	cpi	r25, 0x20	; 32
 102:	a0 f7       	brcc	.-24     	; 0xec <CRC3+0x12>
 104:	f5 cf       	rjmp	.-22     	; 0xf0 <CRC3+0x16>

00000106 <CRC_CHECK3>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	80 7e       	andi	r24, 0xE0	; 224
 10c:	e6 df       	rcall	.-52     	; 0xda <CRC3>
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	c8 13       	cpse	r28, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	89 2f       	mov	r24, r25
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <CRC11>:
 11a:	48 2f       	mov	r20, r24
 11c:	40 7e       	andi	r20, 0xE0	; 224
 11e:	96 2f       	mov	r25, r22
 120:	92 95       	swap	r25
 122:	99 0f       	add	r25, r25
 124:	99 0f       	add	r25, r25
 126:	90 7c       	andi	r25, 0xC0	; 192
 128:	66 95       	lsr	r22
 12a:	66 95       	lsr	r22
 12c:	60 32       	cpi	r22, 0x20	; 32
 12e:	10 f0       	brcs	.+4      	; 0x134 <CRC11+0x1a>
 130:	85 e3       	ldi	r24, 0x35	; 53
 132:	68 27       	eor	r22, r24
 134:	66 0f       	add	r22, r22
 136:	89 2f       	mov	r24, r25
 138:	88 1f       	adc	r24, r24
 13a:	88 27       	eor	r24, r24
 13c:	88 1f       	adc	r24, r24
 13e:	68 2b       	or	r22, r24
 140:	99 0f       	add	r25, r25
 142:	60 32       	cpi	r22, 0x20	; 32
 144:	10 f0       	brcs	.+4      	; 0x14a <CRC11+0x30>
 146:	85 e3       	ldi	r24, 0x35	; 53
 148:	68 27       	eor	r22, r24
 14a:	66 0f       	add	r22, r22
 14c:	99 1f       	adc	r25, r25
 14e:	99 27       	eor	r25, r25
 150:	99 1f       	adc	r25, r25
 152:	86 2f       	mov	r24, r22
 154:	89 2b       	or	r24, r25
 156:	80 32       	cpi	r24, 0x20	; 32
 158:	88 f0       	brcs	.+34     	; 0x17c <CRC11+0x62>
 15a:	95 e3       	ldi	r25, 0x35	; 53
 15c:	89 27       	eor	r24, r25
 15e:	0e c0       	rjmp	.+28     	; 0x17c <CRC11+0x62>
 160:	88 0f       	add	r24, r24
 162:	94 2f       	mov	r25, r20
 164:	99 1f       	adc	r25, r25
 166:	99 27       	eor	r25, r25
 168:	99 1f       	adc	r25, r25
 16a:	89 2b       	or	r24, r25
 16c:	44 0f       	add	r20, r20
 16e:	80 32       	cpi	r24, 0x20	; 32
 170:	08 f0       	brcs	.+2      	; 0x174 <CRC11+0x5a>
 172:	85 27       	eor	r24, r21
 174:	21 50       	subi	r18, 0x01	; 1
 176:	31 09       	sbc	r19, r1
 178:	99 f7       	brne	.-26     	; 0x160 <CRC11+0x46>
 17a:	08 95       	ret
 17c:	28 e0       	ldi	r18, 0x08	; 8
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	55 e3       	ldi	r21, 0x35	; 53
 182:	ee cf       	rjmp	.-36     	; 0x160 <CRC11+0x46>

00000184 <CRC_CHECK11>:
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	c8 df       	rcall	.-112    	; 0x11a <CRC11>
 18a:	cf 71       	andi	r28, 0x1F	; 31
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	c8 13       	cpse	r28, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	89 2f       	mov	r24, r25
 194:	81 95       	neg	r24
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <rollDataPointer>:
 19a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <dataPointer>
 19e:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <dataPointer+0x1>
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	80 38       	cpi	r24, 0x80	; 128
 1a6:	2c e0       	ldi	r18, 0x0C	; 12
 1a8:	92 07       	cpc	r25, r18
 1aa:	28 f4       	brcc	.+10     	; 0x1b6 <rollDataPointer+0x1c>
 1ac:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <dataPointer+0x1>
 1b0:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <dataPointer>
 1b4:	08 95       	ret
 1b6:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <dataPointer+0x1>
 1ba:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <dataPointer>
 1be:	08 95       	ret

000001c0 <START_TIMER>:
 1c0:	81 11       	cpse	r24, r1
 1c2:	10 c0       	rjmp	.+32     	; 0x1e4 <START_TIMER+0x24>
 1c4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timeOutCount>
 1c8:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timeOutCount+0x1>
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	f1 f0       	breq	.+60     	; 0x20c <START_TIMER+0x4c>
 1d0:	9d bd       	out	0x2d, r25	; 45
 1d2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timeOutCount>
 1d6:	8c bd       	out	0x2c, r24	; 44
 1d8:	1f bc       	out	0x2f, r1	; 47
 1da:	85 e0       	ldi	r24, 0x05	; 5
 1dc:	8e bd       	out	0x2e, r24	; 46
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	87 bf       	out	0x37, r24	; 55
 1e2:	08 95       	ret
 1e4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timeOutCount>
 1e8:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timeOutCount+0x1>
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	71 f0       	breq	.+28     	; 0x20c <START_TIMER+0x4c>
 1f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1f4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timeOutCount>
 1f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1fc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 20c:	08 95       	ret

0000020e <STOP_TIMER>:
 20e:	81 11       	cpse	r24, r1
 210:	0a c0       	rjmp	.+20     	; 0x226 <STOP_TIMER+0x18>
 212:	8e b5       	in	r24, 0x2e	; 46
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	8e bd       	out	0x2e, r24	; 46
 218:	8e b5       	in	r24, 0x2e	; 46
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	8e bd       	out	0x2e, r24	; 46
 21e:	87 b7       	in	r24, 0x37	; 55
 220:	8b 7f       	andi	r24, 0xFB	; 251
 222:	87 bf       	out	0x37, r24	; 55
 224:	08 95       	ret
 226:	ea e8       	ldi	r30, 0x8A	; 138
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	8e 7f       	andi	r24, 0xFE	; 254
 22e:	80 83       	st	Z, r24
 230:	80 81       	ld	r24, Z
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	80 83       	st	Z, r24
 236:	ed e7       	ldi	r30, 0x7D	; 125
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <hex_to_chars>:
 242:	fb 01       	movw	r30, r22
 244:	11 82       	std	Z+1, r1	; 0x01
 246:	98 2f       	mov	r25, r24
 248:	92 95       	swap	r25
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	90 83       	st	Z, r25
 24e:	9a 30       	cpi	r25, 0x0A	; 10
 250:	18 f4       	brcc	.+6      	; 0x258 <hex_to_chars+0x16>
 252:	90 5d       	subi	r25, 0xD0	; 208
 254:	90 83       	st	Z, r25
 256:	02 c0       	rjmp	.+4      	; 0x25c <hex_to_chars+0x1a>
 258:	99 5c       	subi	r25, 0xC9	; 201
 25a:	90 83       	st	Z, r25
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	81 83       	std	Z+1, r24	; 0x01
 260:	8a 30       	cpi	r24, 0x0A	; 10
 262:	18 f4       	brcc	.+6      	; 0x26a <hex_to_chars+0x28>
 264:	80 5d       	subi	r24, 0xD0	; 208
 266:	81 83       	std	Z+1, r24	; 0x01
 268:	02 c0       	rjmp	.+4      	; 0x26e <hex_to_chars+0x2c>
 26a:	89 5c       	subi	r24, 0xC9	; 201
 26c:	81 83       	std	Z+1, r24	; 0x01
 26e:	8c e2       	ldi	r24, 0x2C	; 44
 270:	82 83       	std	Z+2, r24	; 0x02
 272:	13 82       	std	Z+3, r1	; 0x03
 274:	08 95       	ret

00000276 <SYS_CONFIG>:
 276:	b8 9a       	sbi	0x17, 0	; 23
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	85 bf       	out	0x35, r24	; 53
 27c:	96 e0       	ldi	r25, 0x06	; 6
 27e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 282:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 286:	8a e1       	ldi	r24, 0x1A	; 26
 288:	89 b9       	out	0x09, r24	; 9
 28a:	28 ed       	ldi	r18, 0xD8	; 216
 28c:	2a b9       	out	0x0a, r18	; 10
 28e:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 292:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 296:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 29a:	88 e9       	ldi	r24, 0x98	; 152
 29c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 2a0:	78 94       	sei
 2a2:	08 95       	ret

000002a4 <SENSOR_TRANSMIT>:
 2a4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 2a8:	95 fd       	sbrc	r25, 5
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <SENSOR_TRANSMIT+0x1e>
 2ac:	eb e9       	ldi	r30, 0x9B	; 155
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	a7 ee       	ldi	r26, 0xE7	; 231
 2b2:	b3 e0       	ldi	r27, 0x03	; 3
 2b4:	11 97       	sbiw	r26, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <SENSOR_TRANSMIT+0x10>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <SENSOR_TRANSMIT+0x16>
 2ba:	00 00       	nop
 2bc:	90 81       	ld	r25, Z
 2be:	95 ff       	sbrs	r25, 5
 2c0:	f7 cf       	rjmp	.-18     	; 0x2b0 <SENSOR_TRANSMIT+0xc>
 2c2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2c6:	08 95       	ret

000002c8 <__vector_29>:
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	0b b6       	in	r0, 0x3b	; 59
 2d4:	0f 92       	push	r0
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
 2ee:	85 b7       	in	r24, 0x35	; 53
 2f0:	8f 7d       	andi	r24, 0xDF	; 223
 2f2:	85 bf       	out	0x35, r24	; 53
 2f4:	80 ee       	ldi	r24, 0xE0	; 224
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	d5 df       	rcall	.-86     	; 0x2a4 <SENSOR_TRANSMIT>
 2fa:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <TOS>
 2fe:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <TOS_STATE>
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0b be       	out	0x3b, r0	; 59
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <USER_TRANSMIT>:
 328:	5d 99       	sbic	0x0b, 5	; 11
 32a:	08 c0       	rjmp	.+16     	; 0x33c <USER_TRANSMIT+0x14>
 32c:	e7 ee       	ldi	r30, 0xE7	; 231
 32e:	f3 e0       	ldi	r31, 0x03	; 3
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <USER_TRANSMIT+0x8>
 334:	00 c0       	rjmp	.+0      	; 0x336 <USER_TRANSMIT+0xe>
 336:	00 00       	nop
 338:	5d 9b       	sbis	0x0b, 5	; 11
 33a:	f8 cf       	rjmp	.-16     	; 0x32c <USER_TRANSMIT+0x4>
 33c:	8c b9       	out	0x0c, r24	; 12
 33e:	08 95       	ret

00000340 <__vector_20>:
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	0b b6       	in	r0, 0x3b	; 59
 34c:	0f 92       	push	r0
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
 366:	85 b7       	in	r24, 0x35	; 53
 368:	8f 7d       	andi	r24, 0xDF	; 223
 36a:	85 bf       	out	0x35, r24	; 53
 36c:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <user_output_buffer_ptr>
 370:	e9 2f       	mov	r30, r25
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ec 50       	subi	r30, 0x0C	; 12
 376:	fe 4f       	sbci	r31, 0xFE	; 254
 378:	80 81       	ld	r24, Z
 37a:	88 23       	and	r24, r24
 37c:	b9 f0       	breq	.+46     	; 0x3ac <__vector_20+0x6c>
 37e:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <bluetoothSending>
 382:	22 23       	and	r18, r18
 384:	99 f0       	breq	.+38     	; 0x3ac <__vector_20+0x6c>
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <user_output_buffer_ptr>
 38c:	cd df       	rcall	.-102    	; 0x328 <USER_TRANSMIT>
 38e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <user_output_buffer_ptr>
 392:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
 396:	e8 17       	cp	r30, r24
 398:	31 f0       	breq	.+12     	; 0x3a6 <__vector_20+0x66>
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	ec 50       	subi	r30, 0x0C	; 12
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	80 81       	ld	r24, Z
 3a2:	81 11       	cpse	r24, r1
 3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <__vector_20+0x74>
 3a6:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <bluetoothSending>
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <__vector_20+0x74>
 3ac:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <user_output_buffer_ptr>
 3b0:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0b be       	out	0x3b, r0	; 59
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <USER_TRANSMIT_START>:

	TREAT_SENSOR_DATA(UDR1); // send to treat data function
}

// function used to transmit a string of bytes to the user
void USER_TRANSMIT_START(char string[]){
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	while(bluetoothSending){ // if a previous transmission is going on, wait, woken up by last tx interrupt
 3e2:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bluetoothSending>
 3e6:	88 23       	and	r24, r24
 3e8:	41 f0       	breq	.+16     	; 0x3fa <USER_TRANSMIT_START+0x20>
		sleep_enable(); // arm sleep mode
 3ea:	85 b7       	in	r24, 0x35	; 53
 3ec:	80 62       	ori	r24, 0x20	; 32
 3ee:	85 bf       	out	0x35, r24	; 53
		sleep_cpu(); // put CPU to sleep
 3f0:	88 95       	sleep
	TREAT_SENSOR_DATA(UDR1); // send to treat data function
}

// function used to transmit a string of bytes to the user
void USER_TRANSMIT_START(char string[]){
	while(bluetoothSending){ // if a previous transmission is going on, wait, woken up by last tx interrupt
 3f2:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bluetoothSending>
 3f6:	81 11       	cpse	r24, r1
 3f8:	f8 cf       	rjmp	.-16     	; 0x3ea <USER_TRANSMIT_START+0x10>
		sleep_enable(); // arm sleep mode
		sleep_cpu(); // put CPU to sleep
	}
		
	bluetoothSending = 1; // set transmission state so next calls need to wait until this is done
 3fa:	11 e0       	ldi	r17, 0x01	; 1
 3fc:	10 93 e3 01 	sts	0x01E3, r17	; 0x8001e3 <bluetoothSending>
	strcpy(user_output_buffer, string); // copy the string to the buffer
 400:	be 01       	movw	r22, r28
 402:	84 ef       	ldi	r24, 0xF4	; 244
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	6c d3       	rcall	.+1752   	; 0xae0 <strcpy>
	strcat(user_output_buffer, ">");
 408:	a4 ef       	ldi	r26, 0xF4	; 244
 40a:	b1 e0       	ldi	r27, 0x01	; 1
 40c:	fd 01       	movw	r30, r26
 40e:	01 90       	ld	r0, Z+
 410:	00 20       	and	r0, r0
 412:	e9 f7       	brne	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	8e e3       	ldi	r24, 0x3E	; 62
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	91 83       	std	Z+1, r25	; 0x01
 41c:	80 83       	st	Z, r24
	user_output_buffer_size = strlen(string)+2; // set the length of the buffer
 41e:	fe 01       	movw	r30, r28
 420:	01 90       	ld	r0, Z+
 422:	00 20       	and	r0, r0
 424:	e9 f7       	brne	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 426:	ec 1b       	sub	r30, r28
 428:	ef 5f       	subi	r30, 0xFF	; 255
 42a:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <__data_end>
	user_output_buffer[user_output_buffer_size-1] = '\0';
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	ed 50       	subi	r30, 0x0D	; 13
 432:	fe 4f       	sbci	r31, 0xFE	; 254
 434:	10 82       	st	Z, r1
	user_output_buffer_ptr = 1; // reset the buffer pointer
 436:	10 93 e4 01 	sts	0x01E4, r17	; 0x8001e4 <user_output_buffer_ptr>
	USER_TRANSMIT(user_output_buffer[0]); // start the first byte transmission, the rest is handled by the tx interrupt
 43a:	8c 91       	ld	r24, X
 43c:	75 df       	rcall	.-278    	; 0x328 <USER_TRANSMIT>
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	08 95       	ret

00000446 <SERVICE_READOUT>:
	buffer[3] = '\0';
}

char dumping = 0;
// function that transmits the content of the logged data to the user
void SERVICE_READOUT(char user_input) {
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	29 97       	sbiw	r28, 0x09	; 9
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
	dumping  = 1;
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <dumping>
	if(dataPointer == 0){
 46a:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <dataPointer>
 46e:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <dataPointer+0x1>
 472:	23 2b       	or	r18, r19
 474:	81 f4       	brne	.+32     	; 0x496 <SERVICE_READOUT+0x50>
		USER_TRANSMIT_START("<No data\n");
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	af df       	rcall	.-162    	; 0x3da <USER_TRANSMIT_START>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	84 e3       	ldi	r24, 0x34	; 52
 480:	9c e0       	ldi	r25, 0x0C	; 12
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <SERVICE_READOUT+0x3c>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <SERVICE_READOUT+0x46>
 48c:	00 00       	nop
		_delay_ms(1000);
		USER_TRANSMIT_START(MENU);
 48e:	8a e0       	ldi	r24, 0x0A	; 10
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	a3 df       	rcall	.-186    	; 0x3da <USER_TRANSMIT_START>
 494:	78 c0       	rjmp	.+240    	; 0x586 <SERVICE_READOUT+0x140>
		return;
	}
	unsigned char tempBuffer[4]; // used to convert numbers to characters
	unsigned char appendedBuffer[5];

	if(user_input == 0) { // mem dump
 496:	81 11       	cpse	r24, r1
 498:	46 c0       	rjmp	.+140    	; 0x526 <SERVICE_READOUT+0xe0>
		USER_TRANSMIT_START("<Memory Dump:\n");
 49a:	8d e2       	ldi	r24, 0x2D	; 45
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	9d df       	rcall	.-198    	; 0x3da <USER_TRANSMIT_START>
 4a0:	ef e7       	ldi	r30, 0x7F	; 127
 4a2:	f8 e3       	ldi	r31, 0x38	; 56
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	e1 50       	subi	r30, 0x01	; 1
 4a8:	f0 40       	sbci	r31, 0x00	; 0
 4aa:	20 40       	sbci	r18, 0x00	; 0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <SERVICE_READOUT+0x60>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <SERVICE_READOUT+0x6a>
 4b0:	00 00       	nop
		_delay_ms(100);
		for(int i = 0; i < dataPointer; i++ ) {
 4b2:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <dataPointer>
 4b6:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <dataPointer+0x1>
 4ba:	89 2b       	or	r24, r25
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <SERVICE_READOUT+0x7a>
 4be:	61 c0       	rjmp	.+194    	; 0x582 <SERVICE_READOUT+0x13c>
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f3 ef       	ldi	r31, 0xF3	; 243
 4c4:	ef 2e       	mov	r14, r31
 4c6:	f2 e0       	ldi	r31, 0x02	; 2
 4c8:	ff 2e       	mov	r15, r31
 4ca:	f0 2d       	mov	r31, r0
 4cc:	00 e0       	ldi	r16, 0x00	; 0
 4ce:	10 e0       	ldi	r17, 0x00	; 0
			hex_to_chars(data[i] & 0x1F, tempBuffer);
			appendedBuffer[0] = '.';
 4d0:	0f 2e       	mov	r0, r31
 4d2:	fe e2       	ldi	r31, 0x2E	; 46
 4d4:	df 2e       	mov	r13, r31
 4d6:	f0 2d       	mov	r31, r0

	if(user_input == 0) { // mem dump
		USER_TRANSMIT_START("<Memory Dump:\n");
		_delay_ms(100);
		for(int i = 0; i < dataPointer; i++ ) {
			hex_to_chars(data[i] & 0x1F, tempBuffer);
 4d8:	f7 01       	movw	r30, r14
 4da:	81 91       	ld	r24, Z+
 4dc:	7f 01       	movw	r14, r30
 4de:	be 01       	movw	r22, r28
 4e0:	6f 5f       	subi	r22, 0xFF	; 255
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 71       	andi	r24, 0x1F	; 31
 4e6:	ad de       	rcall	.-678    	; 0x242 <hex_to_chars>
			appendedBuffer[0] = '.';
 4e8:	dd 82       	std	Y+5, r13	; 0x05
			memcpy(&(appendedBuffer[1]), tempBuffer, 4);
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	9a 81       	ldd	r25, Y+2	; 0x02
 4ee:	ab 81       	ldd	r26, Y+3	; 0x03
 4f0:	bc 81       	ldd	r27, Y+4	; 0x04
 4f2:	8e 83       	std	Y+6, r24	; 0x06
 4f4:	9f 83       	std	Y+7, r25	; 0x07
 4f6:	a8 87       	std	Y+8, r26	; 0x08
			USER_TRANSMIT_START(appendedBuffer);
 4f8:	b9 87       	std	Y+9, r27	; 0x09
 4fa:	ce 01       	movw	r24, r28
 4fc:	05 96       	adiw	r24, 0x05	; 5
 4fe:	6d df       	rcall	.-294    	; 0x3da <USER_TRANSMIT_START>
 500:	ff e7       	ldi	r31, 0x7F	; 127
 502:	28 e3       	ldi	r18, 0x38	; 56
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	f1 50       	subi	r31, 0x01	; 1
 508:	20 40       	sbci	r18, 0x00	; 0
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <SERVICE_READOUT+0xc0>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <SERVICE_READOUT+0xca>
 510:	00 00       	nop
	unsigned char appendedBuffer[5];

	if(user_input == 0) { // mem dump
		USER_TRANSMIT_START("<Memory Dump:\n");
		_delay_ms(100);
		for(int i = 0; i < dataPointer; i++ ) {
 512:	0f 5f       	subi	r16, 0xFF	; 255
 514:	1f 4f       	sbci	r17, 0xFF	; 255
 516:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <dataPointer>
 51a:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <dataPointer+0x1>
 51e:	08 17       	cp	r16, r24
 520:	19 07       	cpc	r17, r25
 522:	d0 f2       	brcs	.-76     	; 0x4d8 <SERVICE_READOUT+0x92>
			USER_TRANSMIT_START(appendedBuffer);
			_delay_ms(100);
		}
	}
	else{ // last entry
		USER_TRANSMIT_START("<Last Entry:\n");
 524:	2e c0       	rjmp	.+92     	; 0x582 <SERVICE_READOUT+0x13c>
 526:	8c e3       	ldi	r24, 0x3C	; 60
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	57 df       	rcall	.-338    	; 0x3da <USER_TRANSMIT_START>
 52c:	9f e7       	ldi	r25, 0x7F	; 127
 52e:	e8 e3       	ldi	r30, 0x38	; 56
 530:	f1 e0       	ldi	r31, 0x01	; 1
 532:	91 50       	subi	r25, 0x01	; 1
 534:	e0 40       	sbci	r30, 0x00	; 0
 536:	f0 40       	sbci	r31, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <SERVICE_READOUT+0xec>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <SERVICE_READOUT+0xf6>
 53c:	00 00       	nop
		_delay_ms(100);
		hex_to_chars(data[dataPointer - 1] & 0x1F, tempBuffer);
 53e:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <dataPointer>
 542:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <dataPointer+0x1>
 546:	ee 50       	subi	r30, 0x0E	; 14
 548:	fd 4f       	sbci	r31, 0xFD	; 253
 54a:	80 81       	ld	r24, Z
 54c:	be 01       	movw	r22, r28
 54e:	6f 5f       	subi	r22, 0xFF	; 255
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	8f 71       	andi	r24, 0x1F	; 31
 554:	76 de       	rcall	.-788    	; 0x242 <hex_to_chars>
		appendedBuffer[0] = '.';
 556:	8e e2       	ldi	r24, 0x2E	; 46
 558:	8d 83       	std	Y+5, r24	; 0x05
		memcpy(&(appendedBuffer[1]), tempBuffer, 4);
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	9a 81       	ldd	r25, Y+2	; 0x02
 55e:	ab 81       	ldd	r26, Y+3	; 0x03
 560:	bc 81       	ldd	r27, Y+4	; 0x04
 562:	8e 83       	std	Y+6, r24	; 0x06
 564:	9f 83       	std	Y+7, r25	; 0x07
 566:	a8 87       	std	Y+8, r26	; 0x08
		USER_TRANSMIT_START(appendedBuffer);
 568:	b9 87       	std	Y+9, r27	; 0x09
 56a:	ce 01       	movw	r24, r28
 56c:	05 96       	adiw	r24, 0x05	; 5
 56e:	35 df       	rcall	.-406    	; 0x3da <USER_TRANSMIT_START>
 570:	2f e7       	ldi	r18, 0x7F	; 127
 572:	88 e3       	ldi	r24, 0x38	; 56
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <SERVICE_READOUT+0x130>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <SERVICE_READOUT+0x13a>
 580:	00 00       	nop
		_delay_ms(100);
	}
	dumping = 0;
 582:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <dumping>
}
 586:	29 96       	adiw	r28, 0x09	; 9
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	08 95       	ret

000005a2 <LOG_REQUEST_FUNCTION>:
	sei(); // enable global interrupts
}

// function that takes in a byte sized number and logs it in data then rolls the pointer forward
void LOG_REQUEST_FUNCTION(unsigned char packet_in){
	data[dataPointer] = packet_in;
 5a2:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <dataPointer>
 5a6:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <dataPointer+0x1>
 5aa:	ed 50       	subi	r30, 0x0D	; 13
 5ac:	fd 4f       	sbci	r31, 0xFD	; 253
 5ae:	80 83       	st	Z, r24
	rollDataPointer();
 5b0:	f4 dd       	rcall	.-1048   	; 0x19a <rollDataPointer>
	sei();
 5b2:	78 94       	sei
	if(!dumping){
 5b4:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <dumping>
 5b8:	81 11       	cpse	r24, r1
 5ba:	17 c0       	rjmp	.+46     	; 0x5ea <LOG_REQUEST_FUNCTION+0x48>
		if(!(dataPointer%4)){
 5bc:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <dataPointer>
 5c0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <dataPointer+0x1>
 5c4:	83 70       	andi	r24, 0x03	; 3
 5c6:	99 27       	eor	r25, r25
 5c8:	89 2b       	or	r24, r25
 5ca:	79 f4       	brne	.+30     	; 0x5ea <LOG_REQUEST_FUNCTION+0x48>
			USER_TRANSMIT_START("<~0New Data Received");
 5cc:	8a e4       	ldi	r24, 0x4A	; 74
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	04 df       	rcall	.-504    	; 0x3da <USER_TRANSMIT_START>
 5d2:	2f ef       	ldi	r18, 0xFF	; 255
 5d4:	84 e3       	ldi	r24, 0x34	; 52
 5d6:	9c e0       	ldi	r25, 0x0C	; 12
 5d8:	21 50       	subi	r18, 0x01	; 1
 5da:	80 40       	sbci	r24, 0x00	; 0
 5dc:	90 40       	sbci	r25, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <LOG_REQUEST_FUNCTION+0x36>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <LOG_REQUEST_FUNCTION+0x40>
 5e2:	00 00       	nop
			_delay_ms(1000);
			USER_TRANSMIT_START(MENU);
 5e4:	8a e0       	ldi	r24, 0x0A	; 10
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	f8 ce       	rjmp	.-528    	; 0x3da <USER_TRANSMIT_START>
 5ea:	08 95       	ret

000005ec <INIT>:
	USER_TRANSMIT(user_output_buffer[0]); // start the first byte transmission, the rest is handled by the tx interrupt
}

// soft initialize, used to reset sensors
void INIT(){
	TOS = CRC3(RESET_REQUEST);
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	75 dd       	rcall	.-1302   	; 0xda <CRC3>
 5f0:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <TOS>
	SENSOR_TRANSMIT(TOS); // reset sensor
 5f4:	57 de       	rcall	.-850    	; 0x2a4 <SENSOR_TRANSMIT>
 5f6:	81 e0       	ldi	r24, 0x01	; 1
	TOS_STATE = FULL;
 5f8:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <TOS_STATE>
	START_TIMER(0); // start timeout timer 1
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	e0 dd       	rcall	.-1088   	; 0x1c0 <START_TIMER>
 600:	2f e7       	ldi	r18, 0x7F	; 127
 602:	8a e1       	ldi	r24, 0x1A	; 26
 604:	96 e0       	ldi	r25, 0x06	; 6
 606:	21 50       	subi	r18, 0x01	; 1
 608:	80 40       	sbci	r24, 0x00	; 0
 60a:	90 40       	sbci	r25, 0x00	; 0
 60c:	e1 f7       	brne	.-8      	; 0x606 <INIT+0x1a>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <INIT+0x24>
 610:	00 00       	nop
	_delay_ms(500);
	USER_TRANSMIT_START("<RESETTING SENSOR");
 612:	8f e5       	ldi	r24, 0x5F	; 95
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	e1 de       	rcall	.-574    	; 0x3da <USER_TRANSMIT_START>
 618:	2f e7       	ldi	r18, 0x7F	; 127
 61a:	8a e1       	ldi	r24, 0x1A	; 26
 61c:	96 e0       	ldi	r25, 0x06	; 6
 61e:	21 50       	subi	r18, 0x01	; 1
 620:	80 40       	sbci	r24, 0x00	; 0
 622:	90 40       	sbci	r25, 0x00	; 0
 624:	e1 f7       	brne	.-8      	; 0x61e <INIT+0x32>
 626:	00 c0       	rjmp	.+0      	; 0x628 <INIT+0x3c>
 628:	00 00       	nop
 62a:	08 95       	ret

0000062c <__vector_14>:
 62c:	1f 92       	push	r1
		ETIMSK &= ~(1<<TOIE3);
	}
}

// timeout timer 1 triggered, send reset to sensor
ISR (TIMER1_OVF_vect){
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	0b b6       	in	r0, 0x3b	; 59
 638:	0f 92       	push	r0
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
	sleep_disable();
 652:	85 b7       	in	r24, 0x35	; 53
 654:	8f 7d       	andi	r24, 0xDF	; 223
 656:	85 bf       	out	0x35, r24	; 53
	INIT();
 658:	c9 df       	rcall	.-110    	; 0x5ec <INIT>
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0b be       	out	0x3b, r0	; 59
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <TREAT_SENSOR_DATA>:
	USER_TRANSMIT_START("<RESETTING SENSOR");
	_delay_ms(500);
}

// main function that deals with the sensor input protocol
void TREAT_SENSOR_DATA(unsigned char packet_in){	
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	c8 2f       	mov	r28, r24
	if (((1<<7)&packet_in) == 0x80) {// if not command type, eg packet_in[7] == 1
 686:	88 23       	and	r24, r24
 688:	3c f4       	brge	.+14     	; 0x698 <TREAT_SENSOR_DATA+0x18>
		TOS = packet_in;
 68a:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <TOS>
		TOS_STATE = FULL;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <TOS_STATE>
		START_TIMER(1);
 694:	95 dd       	rcall	.-1238   	; 0x1c0 <START_TIMER>
 696:	36 c0       	rjmp	.+108    	; 0x704 <TREAT_SENSOR_DATA+0x84>
	} else { // it is a command
		STOP_TIMER(1);
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	b9 dd       	rcall	.-1166   	; 0x20e <STOP_TIMER>
		if( ((1<<7)&TOS) == 0x80) { // if TOS has data packet
 69c:	d0 91 ea 01 	lds	r29, 0x01EA	; 0x8001ea <TOS>
 6a0:	dd 23       	and	r29, r29
 6a2:	c4 f4       	brge	.+48     	; 0x6d4 <TREAT_SENSOR_DATA+0x54>
			unsigned char result = CRC_CHECK11(packet_in, TOS);
 6a4:	6d 2f       	mov	r22, r29
 6a6:	8c 2f       	mov	r24, r28
 6a8:	6d dd       	rcall	.-1318   	; 0x184 <CRC_CHECK11>
			if (result==0xFF) { // If CRC_CHECK11 PASS
 6aa:	8f 3f       	cpi	r24, 0xFF	; 255
 6ac:	69 f4       	brne	.+26     	; 0x6c8 <TREAT_SENSOR_DATA+0x48>
				if ( (packet_in&0xE0) == LOG_REQUEST ) { // if packet in is log request
 6ae:	c0 7e       	andi	r28, 0xE0	; 224
 6b0:	c0 32       	cpi	r28, 0x20	; 32
					LOG_REQUEST_FUNCTION(TOS);
 6b2:	41 f4       	brne	.+16     	; 0x6c4 <TREAT_SENSOR_DATA+0x44>
 6b4:	8d 2f       	mov	r24, r29
					TOS_STATE = EMPTY;
 6b6:	75 df       	rcall	.-278    	; 0x5a2 <LOG_REQUEST_FUNCTION>
					SENSOR_TRANSMIT(CRC3(ACNKOWLEDGE));
 6b8:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <TOS_STATE>
 6bc:	80 e4       	ldi	r24, 0x40	; 64
 6be:	0d dd       	rcall	.-1510   	; 0xda <CRC3>
 6c0:	f1 dd       	rcall	.-1054   	; 0x2a4 <SENSOR_TRANSMIT>
				}
				else{
					INIT();
 6c2:	20 c0       	rjmp	.+64     	; 0x704 <TREAT_SENSOR_DATA+0x84>
 6c4:	93 df       	rcall	.-218    	; 0x5ec <INIT>
				}
			} else { // CRC_CHECK11 FAIL
				TOS_STATE = EMPTY;
 6c6:	1e c0       	rjmp	.+60     	; 0x704 <TREAT_SENSOR_DATA+0x84>
				SENSOR_TRANSMIT(CRC3(REPEAT_REQUEST));
 6c8:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <TOS_STATE>
 6cc:	80 ee       	ldi	r24, 0xE0	; 224
 6ce:	05 dd       	rcall	.-1526   	; 0xda <CRC3>
 6d0:	e9 dd       	rcall	.-1070   	; 0x2a4 <SENSOR_TRANSMIT>
 6d2:	18 c0       	rjmp	.+48     	; 0x704 <TREAT_SENSOR_DATA+0x84>
			}
		} else { // If TOS does not have Data packet
			unsigned char result = CRC_CHECK3(packet_in);
 6d4:	8c 2f       	mov	r24, r28
 6d6:	17 dd       	rcall	.-1490   	; 0x106 <CRC_CHECK3>
			if( result == 0xFF) { // if CRC_CHECK3 passes
 6d8:	8f 3f       	cpi	r24, 0xFF	; 255
 6da:	89 f4       	brne	.+34     	; 0x6fe <TREAT_SENSOR_DATA+0x7e>
 6dc:	c0 7e       	andi	r28, 0xE0	; 224
				if ( (packet_in&0xE0) == ACNKOWLEDGE ) {
 6de:	c0 34       	cpi	r28, 0x40	; 64
 6e0:	29 f4       	brne	.+10     	; 0x6ec <TREAT_SENSOR_DATA+0x6c>
					TOS_STATE = EMPTY;
 6e2:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <TOS_STATE>
					STOP_TIMER(0);
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	92 dd       	rcall	.-1244   	; 0x20e <STOP_TIMER>
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <TREAT_SENSOR_DATA+0x84>
				}
				else{ // not acknowledge
					if ( (packet_in&0xE0) == REPEAT_REQUEST ){
 6ec:	c0 3e       	cpi	r28, 0xE0	; 224
						if (TOS_STATE == FULL)
 6ee:	51 f4       	brne	.+20     	; 0x704 <TREAT_SENSOR_DATA+0x84>
 6f0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <TOS_STATE>
 6f4:	81 30       	cpi	r24, 0x01	; 1
						SENSOR_TRANSMIT(TOS);
 6f6:	31 f4       	brne	.+12     	; 0x704 <TREAT_SENSOR_DATA+0x84>
 6f8:	8d 2f       	mov	r24, r29
 6fa:	d4 dd       	rcall	.-1112   	; 0x2a4 <SENSOR_TRANSMIT>
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <TREAT_SENSOR_DATA+0x84>
					}
				}

			} else { // if CRC_CHECK3 fails
				SENSOR_TRANSMIT(CRC3(REPEAT_REQUEST));
 6fe:	80 ee       	ldi	r24, 0xE0	; 224
 700:	ec dc       	rcall	.-1576   	; 0xda <CRC3>
 702:	d0 dd       	rcall	.-1120   	; 0x2a4 <SENSOR_TRANSMIT>
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
			}
		}
	}
}
 708:	08 95       	ret

0000070a <__vector_30>:
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
	
	return number;
}

// xbee rx, sensor receive
ISR(USART1_RX_vect) {
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	0b b6       	in	r0, 0x3b	; 59
 716:	0f 92       	push	r0
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
	sleep_disable(); // disable sleep once an interrupt wakes CPU up
 730:	85 b7       	in	r24, 0x35	; 53
 732:	8f 7d       	andi	r24, 0xDF	; 223
 734:	85 bf       	out	0x35, r24	; 53

	TREAT_SENSOR_DATA(UDR1); // send to treat data function
 736:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	a1 df       	rcall	.-190    	; 0x680 <TREAT_SENSOR_DATA>
}
 73e:	ff 91       	pop	r31
 740:	ef 91       	pop	r30
 742:	bf 91       	pop	r27
 744:	af 91       	pop	r26
 746:	9f 91       	pop	r25
 748:	8f 91       	pop	r24
 74a:	7f 91       	pop	r23
 74c:	6f 91       	pop	r22
 74e:	5f 91       	pop	r21
 750:	4f 91       	pop	r20
 752:	3f 91       	pop	r19
 754:	2f 91       	pop	r18
 756:	0f 90       	pop	r0
 758:	0b be       	out	0x3b, r0	; 59
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	18 95       	reti

00000764 <READ_FROM_EEPROM>:
	}
}

// reads and returns a byte from eeprom at address
char READ_FROM_EEPROM(short address){
	while((EECR & (1<<EEWE)) == 2)
 764:	e1 9b       	sbis	0x1c, 1	; 28
 766:	08 c0       	rjmp	.+16     	; 0x778 <READ_FROM_EEPROM+0x14>
 768:	e7 ee       	ldi	r30, 0xE7	; 231
 76a:	f3 e0       	ldi	r31, 0x03	; 3
 76c:	31 97       	sbiw	r30, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <READ_FROM_EEPROM+0x8>
 770:	00 c0       	rjmp	.+0      	; 0x772 <READ_FROM_EEPROM+0xe>
 772:	00 00       	nop
 774:	e1 99       	sbic	0x1c, 1	; 28
 776:	f8 cf       	rjmp	.-16     	; 0x768 <READ_FROM_EEPROM+0x4>
	_delay_ms(1);
	
	EEARH = address&0xFF00;
 778:	1f ba       	out	0x1f, r1	; 31
	EEARL = address&0x00FF;
 77a:	8e bb       	out	0x1e, r24	; 30
	EECR = (1<<EERE);
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 780:	8d b3       	in	r24, 0x1d	; 29
}
 782:	08 95       	ret

00000784 <SAVE_TO_EEPROM>:

// writes a byte to eeprom at address
void SAVE_TO_EEPROM(unsigned short address, char data){
	while((EECR & (1<<EEWE)) == 2)
 784:	e1 9b       	sbis	0x1c, 1	; 28
 786:	08 c0       	rjmp	.+16     	; 0x798 <SAVE_TO_EEPROM+0x14>
 788:	e7 ee       	ldi	r30, 0xE7	; 231
 78a:	f3 e0       	ldi	r31, 0x03	; 3
 78c:	31 97       	sbiw	r30, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <SAVE_TO_EEPROM+0x8>
 790:	00 c0       	rjmp	.+0      	; 0x792 <SAVE_TO_EEPROM+0xe>
 792:	00 00       	nop
 794:	e1 99       	sbic	0x1c, 1	; 28
 796:	f8 cf       	rjmp	.-16     	; 0x788 <SAVE_TO_EEPROM+0x4>
	_delay_ms(1);
	
	EEARH = address&0xFF00;
 798:	1f ba       	out	0x1f, r1	; 31
	EEARL = address&0x00FF;
 79a:	8e bb       	out	0x1e, r24	; 30
	
	EEDR = data;
 79c:	6d bb       	out	0x1d, r22	; 29
	EECR = (1<<EEMWE);
 79e:	84 e0       	ldi	r24, 0x04	; 4
 7a0:	8c bb       	out	0x1c, r24	; 28
	EECR = (1<<EEWE);
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	8c bb       	out	0x1c, r24	; 28
 7a6:	08 95       	ret

000007a8 <PROMPT_USER_WD>:
}

// prompts the user to setup timeout and watchdog timers
void PROMPT_USER_WD(){
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
	unsigned short timer = 0;
	
	saved = READ_FROM_EEPROM(0x00); // read whether already setup on eeprom or not
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	d7 df       	rcall	.-82     	; 0x764 <READ_FROM_EEPROM>
 7b6:	80 93 75 0f 	sts	0x0F75, r24	; 0x800f75 <saved>
	wdSaved = saved;
 7ba:	80 93 73 0f 	sts	0x0F73, r24	; 0x800f73 <wdSaved>
 7be:	d1 e0       	ldi	r29, 0x01	; 1
 7c0:	c0 e0       	ldi	r28, 0x00	; 0
	EECR = (1<<EEWE);
}

// prompts the user to setup timeout and watchdog timers
void PROMPT_USER_WD(){
	unsigned short timer = 0;
 7c2:	00 e0       	ldi	r16, 0x00	; 0
 7c4:	10 e0       	ldi	r17, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <PROMPT_USER_WD+0x24>
 7c8:	cf 5f       	subi	r28, 0xFF	; 255
 7ca:	df 5f       	subi	r29, 0xFF	; 255
	saved = READ_FROM_EEPROM(0x00); // read whether already setup on eeprom or not
	wdSaved = saved;
	
	// reads previous timer
	for(char i = 0; i < 2; i++){
		timer |= READ_FROM_EEPROM(0x01 + i);
 7cc:	8c 2f       	mov	r24, r28
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	01 96       	adiw	r24, 0x01	; 1
 7d2:	c8 df       	rcall	.-112    	; 0x764 <READ_FROM_EEPROM>
 7d4:	08 2b       	or	r16, r24
		if(i == 0)
 7d6:	c1 11       	cpse	r28, r1
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <PROMPT_USER_WD+0x38>
			timer = timer<<8;
 7da:	10 2f       	mov	r17, r16
 7dc:	00 27       	eor	r16, r16
 7de:	f4 cf       	rjmp	.-24     	; 0x7c8 <PROMPT_USER_WD+0x20>
	
	saved = READ_FROM_EEPROM(0x00); // read whether already setup on eeprom or not
	wdSaved = saved;
	
	// reads previous timer
	for(char i = 0; i < 2; i++){
 7e0:	d2 30       	cpi	r29, 0x02	; 2
 7e2:	90 f3       	brcs	.-28     	; 0x7c8 <PROMPT_USER_WD+0x20>
		timer |= READ_FROM_EEPROM(0x01 + i);
		if(i == 0)
			timer = timer<<8;
	}
	watchdogSetting = READ_FROM_EEPROM(0x03);
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	bd df       	rcall	.-134    	; 0x764 <READ_FROM_EEPROM>
 7ea:	80 93 74 0f 	sts	0x0F74, r24	; 0x800f74 <watchdogSetting>
	
	if(saved){ // if not saved
 7ee:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <saved>
 7f2:	88 23       	and	r24, r24
		USER_TRANSMIT_START("<timeout duration\n(0-8)(0 to disable):");
 7f4:	61 f0       	breq	.+24     	; 0x80e <PROMPT_USER_WD+0x66>
 7f6:	81 e7       	ldi	r24, 0x71	; 113
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	ef dd       	rcall	.-1058   	; 0x3da <USER_TRANSMIT_START>
		timeOutCount = 0;
 7fc:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <timeOutCount+0x1>
 800:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <timeOutCount>
	}else{
	 // if saved, use previous read counter timer
		timeOutCount = timer;
	}
	while(saved){ // waits until user inputs and sets up timers
 804:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <saved>
 808:	81 11       	cpse	r24, r1
 80a:	06 c0       	rjmp	.+12     	; 0x818 <PROMPT_USER_WD+0x70>
 80c:	0d c0       	rjmp	.+26     	; 0x828 <PROMPT_USER_WD+0x80>
	if(saved){ // if not saved
		USER_TRANSMIT_START("<timeout duration\n(0-8)(0 to disable):");
		timeOutCount = 0;
	}else{
	 // if saved, use previous read counter timer
		timeOutCount = timer;
 80e:	10 93 e8 01 	sts	0x01E8, r17	; 0x8001e8 <timeOutCount+0x1>
 812:	00 93 e7 01 	sts	0x01E7, r16	; 0x8001e7 <timeOutCount>
 816:	08 c0       	rjmp	.+16     	; 0x828 <PROMPT_USER_WD+0x80>
	}
	while(saved){ // waits until user inputs and sets up timers
		sleep_enable(); // arm sleep mode
 818:	85 b7       	in	r24, 0x35	; 53
 81a:	80 62       	ori	r24, 0x20	; 32
 81c:	85 bf       	out	0x35, r24	; 53
		sleep_cpu(); // put CPU to sleep
 81e:	88 95       	sleep
		timeOutCount = 0;
	}else{
	 // if saved, use previous read counter timer
		timeOutCount = timer;
	}
	while(saved){ // waits until user inputs and sets up timers
 820:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <saved>
 824:	81 11       	cpse	r24, r1
 826:	f8 cf       	rjmp	.-16     	; 0x818 <PROMPT_USER_WD+0x70>
		sleep_enable(); // arm sleep mode
		sleep_cpu(); // put CPU to sleep
	}
	
	if(wdSaved){ // if not saved
 828:	80 91 73 0f 	lds	r24, 0x0F73	; 0x800f73 <wdSaved>
 82c:	88 23       	and	r24, r24
		USER_TRANSMIT_START("<Watchdog timer\n(0-8)(0 to disable):");
 82e:	c1 f0       	breq	.+48     	; 0x860 <PROMPT_USER_WD+0xb8>
 830:	88 e9       	ldi	r24, 0x98	; 152
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	d2 dd       	rcall	.-1116   	; 0x3da <USER_TRANSMIT_START>
 836:	2f e7       	ldi	r18, 0x7F	; 127
 838:	8a e1       	ldi	r24, 0x1A	; 26
 83a:	96 e0       	ldi	r25, 0x06	; 6
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	80 40       	sbci	r24, 0x00	; 0
 840:	90 40       	sbci	r25, 0x00	; 0
 842:	e1 f7       	brne	.-8      	; 0x83c <PROMPT_USER_WD+0x94>
 844:	00 c0       	rjmp	.+0      	; 0x846 <PROMPT_USER_WD+0x9e>
 846:	00 00       	nop
		_delay_ms(500);
	}
	
	while(wdSaved){ // waits until user inputs and sets up timers
 848:	80 91 73 0f 	lds	r24, 0x0F73	; 0x800f73 <wdSaved>
 84c:	88 23       	and	r24, r24
 84e:	41 f0       	breq	.+16     	; 0x860 <PROMPT_USER_WD+0xb8>
		sleep_enable(); // arm sleep mode
 850:	85 b7       	in	r24, 0x35	; 53
 852:	80 62       	ori	r24, 0x20	; 32
 854:	85 bf       	out	0x35, r24	; 53
		sleep_cpu(); // put CPU to sleep
 856:	88 95       	sleep
	if(wdSaved){ // if not saved
		USER_TRANSMIT_START("<Watchdog timer\n(0-8)(0 to disable):");
		_delay_ms(500);
	}
	
	while(wdSaved){ // waits until user inputs and sets up timers
 858:	80 91 73 0f 	lds	r24, 0x0F73	; 0x800f73 <wdSaved>
 85c:	81 11       	cpse	r24, r1
 85e:	f8 cf       	rjmp	.-16     	; 0x850 <PROMPT_USER_WD+0xa8>
 860:	8f e4       	ldi	r24, 0x4F	; 79
 862:	93 ec       	ldi	r25, 0xC3	; 195
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <PROMPT_USER_WD+0xbc>
 868:	00 c0       	rjmp	.+0      	; 0x86a <PROMPT_USER_WD+0xc2>
		sleep_cpu(); // put CPU to sleep
	}
	
	// saves settings to eeprom
	_delay_ms(50);
	USER_TRANSMIT_START("<Saving settings");
 86a:	00 00       	nop
 86c:	8d eb       	ldi	r24, 0xBD	; 189
 86e:	91 e0       	ldi	r25, 0x01	; 1
 870:	b4 dd       	rcall	.-1176   	; 0x3da <USER_TRANSMIT_START>
 872:	9f e7       	ldi	r25, 0x7F	; 127
 874:	2a e1       	ldi	r18, 0x1A	; 26
 876:	86 e0       	ldi	r24, 0x06	; 6
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	20 40       	sbci	r18, 0x00	; 0
 87c:	80 40       	sbci	r24, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <PROMPT_USER_WD+0xd0>
 880:	00 c0       	rjmp	.+0      	; 0x882 <PROMPT_USER_WD+0xda>
	_delay_ms(500);
	// writing saved and timer settings
	SAVE_TO_EEPROM(0x00, 0x00);
 882:	00 00       	nop
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
	SAVE_TO_EEPROM(0x01, (timeOutCount&0xFF00)>>8);
 88a:	7c df       	rcall	.-264    	; 0x784 <SAVE_TO_EEPROM>
 88c:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <timeOutCount+0x1>
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
	SAVE_TO_EEPROM(0x02, (timeOutCount&0x00FF));
 894:	77 df       	rcall	.-274    	; 0x784 <SAVE_TO_EEPROM>
 896:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timeOutCount>
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	90 e0       	ldi	r25, 0x00	; 0
	SAVE_TO_EEPROM(0x03, watchdogSetting);
 89e:	72 df       	rcall	.-284    	; 0x784 <SAVE_TO_EEPROM>
 8a0:	60 91 74 0f 	lds	r22, 0x0F74	; 0x800f74 <watchdogSetting>
 8a4:	83 e0       	ldi	r24, 0x03	; 3
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	6d df       	rcall	.-294    	; 0x784 <SAVE_TO_EEPROM>
	timeOutCount = 65536 - timeOutCount;
 8aa:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timeOutCount>
 8ae:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timeOutCount+0x1>
 8b2:	91 95       	neg	r25
 8b4:	81 95       	neg	r24
 8b6:	91 09       	sbc	r25, r1
 8b8:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timeOutCount+0x1>
 8bc:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timeOutCount>
}
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	08 95       	ret

000008ca <enableWD>:

void enableWD(){
	char sub;
	switch (watchdogSetting){
 8ca:	e0 91 74 0f 	lds	r30, 0x0F74	; 0x800f74 <watchdogSetting>
 8ce:	8e 2f       	mov	r24, r30
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	89 30       	cpi	r24, 0x09	; 9
 8d4:	91 05       	cpc	r25, r1
 8d6:	d8 f4       	brcc	.+54     	; 0x90e <enableWD+0x44>
 8d8:	fc 01       	movw	r30, r24
 8da:	ea 5b       	subi	r30, 0xBA	; 186
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	d8 c0       	rjmp	.+432    	; 0xa90 <__tablejump2__>
		break;
		case 2:
		sub = WDTO_30MS;
		break;
		case 3:
		sub = WDTO_60MS;
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <enableWD+0x28>
		break;
		case 4:
		sub = WDTO_120MS;
		break;
		case 5:
		sub = WDTO_250MS;
 8e4:	84 e0       	ldi	r24, 0x04	; 4
		break;
 8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <enableWD+0x28>
		case 6:
		sub = WDTO_500MS;
 8e8:	85 e0       	ldi	r24, 0x05	; 5
		break;
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <enableWD+0x28>
		case 7:
		sub = WDTO_1S;
 8ec:	86 e0       	ldi	r24, 0x06	; 6
		break;
 8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <enableWD+0x28>
		case 8:
		sub = WDTO_2S;
 8f0:	87 e0       	ldi	r24, 0x07	; 7
		break;
	}
	if(sub){
		PORTB |= 0x01; // shows you that watchdog is armed
 8f2:	c0 9a       	sbi	0x18, 0	; 24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 8f4:	88 60       	ori	r24, 0x08	; 8
 8f6:	98 e1       	ldi	r25, 0x18	; 24
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	f8 94       	cli
 8fc:	a8 95       	wdr
 8fe:	91 bd       	out	0x21, r25	; 33
 900:	0f be       	out	0x3f, r0	; 63
 902:	81 bd       	out	0x21, r24	; 33
		wdt_enable(sub);
	}
}
 904:	08 95       	ret
		break;
		case 1:
		sub = WDTO_15MS;
		break;
		case 2:
		sub = WDTO_30MS;
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	f4 cf       	rjmp	.-24     	; 0x8f2 <enableWD+0x28>
		break;
		case 3:
		sub = WDTO_60MS;
		break;
		case 4:
		sub = WDTO_120MS;
 90a:	83 e0       	ldi	r24, 0x03	; 3
 90c:	f2 cf       	rjmp	.-28     	; 0x8f2 <enableWD+0x28>
 90e:	08 95       	ret

00000910 <startI>:
	}
}

// reset and restart procedure
void startI(void){
	SYS_CONFIG(); // configure the system
 910:	b2 dc       	rcall	.-1692   	; 0x276 <SYS_CONFIG>
	PROMPT_USER_WD(); // prompt the user for timer setup if not setup
 912:	4a df       	rcall	.-364    	; 0x7a8 <PROMPT_USER_WD>
	INIT(); // initializes and reset the sensors
 914:	6b de       	rcall	.-810    	; 0x5ec <INIT>
	USER_TRANSMIT_START(MENU); // prints menu
 916:	8a e0       	ldi	r24, 0x0A	; 10
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	5f cd       	rjmp	.-1346   	; 0x3da <USER_TRANSMIT_START>
 91c:	08 95       	ret

0000091e <__vector_18>:
 91e:	1f 92       	push	r1
char user_input_buffer [5];
char user_input_buffer_ptr = 0;

// bluetooth rx
// data register empty
ISR(USART0_RX_vect) {
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	0b b6       	in	r0, 0x3b	; 59
 92a:	0f 92       	push	r0
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
 930:	2f 93       	push	r18
 932:	3f 93       	push	r19
 934:	4f 93       	push	r20
 936:	5f 93       	push	r21
 938:	6f 93       	push	r22
 93a:	7f 93       	push	r23
 93c:	8f 93       	push	r24
 93e:	9f 93       	push	r25
 940:	af 93       	push	r26
 942:	bf 93       	push	r27
 944:	ef 93       	push	r30
 946:	ff 93       	push	r31
	sleep_disable(); // disable sleep once an interrupt wakes CPU up
 948:	85 b7       	in	r24, 0x35	; 53
 94a:	8f 7d       	andi	r24, 0xDF	; 223
 94c:	85 bf       	out	0x35, r24	; 53
	
	// reset wd timer
	wdt_reset();
 94e:	a8 95       	wdr
	
	// read one byte from the usart register and roll the buffer pointer
	user_input_buffer[user_input_buffer_ptr++] = UDR0;
 950:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <user_input_buffer_ptr>
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	8e 0f       	add	r24, r30
 958:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <user_input_buffer_ptr>
 95c:	9c b1       	in	r25, 0x0c	; 12
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	e1 51       	subi	r30, 0x11	; 17
 962:	fe 4f       	sbci	r31, 0xFE	; 254
 964:	90 83       	st	Z, r25
	if(user_input_buffer_ptr > 2)
 966:	83 30       	cpi	r24, 0x03	; 3
 968:	10 f0       	brcs	.+4      	; 0x96e <__vector_18+0x50>
		user_input_buffer_ptr = 0;
 96a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <user_input_buffer_ptr>
	// if the read byte is a '.' command is issued
	if (user_input_buffer[user_input_buffer_ptr - 1] == '.') {
 96e:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <user_input_buffer_ptr>
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	e2 51       	subi	r30, 0x12	; 18
 976:	fe 4f       	sbci	r31, 0xFE	; 254
 978:	80 81       	ld	r24, Z
 97a:	8e 32       	cpi	r24, 0x2E	; 46
 97c:	09 f0       	breq	.+2      	; 0x980 <__vector_18+0x62>
 97e:	6c c0       	rjmp	.+216    	; 0xa58 <__vector_18+0x13a>
		// checks if timeout and wd timers are setup, if not, it expects them to be the first inputs by the user
		if(saved){
 980:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <saved>
 984:	88 23       	and	r24, r24
 986:	89 f1       	breq	.+98     	; 0x9ea <__vector_18+0xcc>
			// checks the validity of user input
			if(user_input_buffer[0] <= '8' && user_input_buffer[0] >= '0'){
 988:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <user_input_buffer>
 98c:	80 ed       	ldi	r24, 0xD0	; 208
 98e:	8a 0f       	add	r24, r26
 990:	89 30       	cpi	r24, 0x09	; 9
 992:	08 f0       	brcs	.+2      	; 0x996 <__vector_18+0x78>
 994:	5f c0       	rjmp	.+190    	; 0xa54 <__vector_18+0x136>
				// notify user, calculate the timer counter and set saved
				timeOutCount = (user_input_buffer[0] - '0') * 8 * 1000000 / 1024;
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	d0 97       	sbiw	r26, 0x30	; 48
 99a:	aa 0f       	add	r26, r26
 99c:	bb 1f       	adc	r27, r27
 99e:	aa 0f       	add	r26, r26
 9a0:	bb 1f       	adc	r27, r27
 9a2:	aa 0f       	add	r26, r26
 9a4:	bb 1f       	adc	r27, r27
 9a6:	20 e4       	ldi	r18, 0x40	; 64
 9a8:	32 e4       	ldi	r19, 0x42	; 66
 9aa:	4f e0       	ldi	r20, 0x0F	; 15
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	79 d0       	rcall	.+242    	; 0xaa2 <__mulshisi3>
 9b0:	8b 01       	movw	r16, r22
 9b2:	9c 01       	movw	r18, r24
 9b4:	99 23       	and	r25, r25
 9b6:	24 f4       	brge	.+8      	; 0x9c0 <__vector_18+0xa2>
 9b8:	01 50       	subi	r16, 0x01	; 1
 9ba:	1c 4f       	sbci	r17, 0xFC	; 252
 9bc:	2f 4f       	sbci	r18, 0xFF	; 255
 9be:	3f 4f       	sbci	r19, 0xFF	; 255
 9c0:	d9 01       	movw	r26, r18
 9c2:	c8 01       	movw	r24, r16
 9c4:	07 2e       	mov	r0, r23
 9c6:	7a e0       	ldi	r23, 0x0A	; 10
 9c8:	b5 95       	asr	r27
 9ca:	a7 95       	ror	r26
 9cc:	97 95       	ror	r25
 9ce:	87 95       	ror	r24
 9d0:	7a 95       	dec	r23
 9d2:	d1 f7       	brne	.-12     	; 0x9c8 <__vector_18+0xaa>
 9d4:	70 2d       	mov	r23, r0
 9d6:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timeOutCount+0x1>
 9da:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timeOutCount>
				saved = 0;
 9de:	10 92 75 0f 	sts	0x0F75, r1	; 0x800f75 <saved>
				//sei();
				USER_TRANSMIT_START(">>");
 9e2:	8e ec       	ldi	r24, 0xCE	; 206
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	f9 dc       	rcall	.-1550   	; 0x3da <USER_TRANSMIT_START>
 9e8:	35 c0       	rjmp	.+106    	; 0xa54 <__vector_18+0x136>
			}
		}
		else if(wdSaved){ // expects wd setup second// checks the validity of user input
 9ea:	80 91 73 0f 	lds	r24, 0x0F73	; 0x800f73 <wdSaved>
 9ee:	88 23       	and	r24, r24
 9f0:	69 f0       	breq	.+26     	; 0xa0c <__vector_18+0xee>
			if(user_input_buffer[0] <= '8' && user_input_buffer[0] >= '0'){
 9f2:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <user_input_buffer>
 9f6:	80 53       	subi	r24, 0x30	; 48
 9f8:	89 30       	cpi	r24, 0x09	; 9
 9fa:	60 f5       	brcc	.+88     	; 0xa54 <__vector_18+0x136>
				// notify user, calculate the timer counter and set saved
				watchdogSetting = user_input_buffer[0] - '0';
 9fc:	80 93 74 0f 	sts	0x0F74, r24	; 0x800f74 <watchdogSetting>
				wdSaved = 0;
 a00:	10 92 73 0f 	sts	0x0F73, r1	; 0x800f73 <wdSaved>
				//sei();
				USER_TRANSMIT_START(">>");
 a04:	8e ec       	ldi	r24, 0xCE	; 206
 a06:	91 e0       	ldi	r25, 0x01	; 1
 a08:	e8 dc       	rcall	.-1584   	; 0x3da <USER_TRANSMIT_START>
 a0a:	24 c0       	rjmp	.+72     	; 0xa54 <__vector_18+0x136>
			}
		}
		else{ // normal operation command
			char number = user_input_buffer[0];
			switch (number){
 a0c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <user_input_buffer>
 a10:	82 33       	cpi	r24, 0x32	; 50
 a12:	41 f0       	breq	.+16     	; 0xa24 <__vector_18+0x106>
 a14:	83 33       	cpi	r24, 0x33	; 51
 a16:	51 f0       	breq	.+20     	; 0xa2c <__vector_18+0x10e>
 a18:	81 33       	cpi	r24, 0x31	; 49
				// mem dump
				case '1':
				sei(); // interrupts are reenabled since service readout relies on them
 a1a:	51 f4       	brne	.+20     	; 0xa30 <__vector_18+0x112>
				SERVICE_READOUT(0);
 a1c:	78 94       	sei
 a1e:	80 e0       	ldi	r24, 0x00	; 0
				break;
 a20:	12 dd       	rcall	.-1500   	; 0x446 <SERVICE_READOUT>
				// last entry
				case '2':
				sei(); // interrupts are reenabled since service readout relies on them
				SERVICE_READOUT(1);
 a22:	18 c0       	rjmp	.+48     	; 0xa54 <__vector_18+0x136>
 a24:	78 94       	sei
 a26:	81 e0       	ldi	r24, 0x01	; 1
				break;
 a28:	0e dd       	rcall	.-1508   	; 0x446 <SERVICE_READOUT>
				// reset
				case '3':
				startI();
 a2a:	14 c0       	rjmp	.+40     	; 0xa54 <__vector_18+0x136>
				break;
 a2c:	71 df       	rcall	.-286    	; 0x910 <startI>
				// unknown command
				default:
				sei();
 a2e:	12 c0       	rjmp	.+36     	; 0xa54 <__vector_18+0x136>
				USER_TRANSMIT_START("<Invalid command");
 a30:	78 94       	sei
 a32:	81 ed       	ldi	r24, 0xD1	; 209
 a34:	91 e0       	ldi	r25, 0x01	; 1
 a36:	d1 dc       	rcall	.-1630   	; 0x3da <USER_TRANSMIT_START>
				user_input_buffer_ptr = 0;
 a38:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <user_input_buffer_ptr>
 a3c:	2f ef       	ldi	r18, 0xFF	; 255
 a3e:	84 e3       	ldi	r24, 0x34	; 52
 a40:	9c e0       	ldi	r25, 0x0C	; 12
 a42:	21 50       	subi	r18, 0x01	; 1
 a44:	80 40       	sbci	r24, 0x00	; 0
 a46:	90 40       	sbci	r25, 0x00	; 0
 a48:	e1 f7       	brne	.-8      	; 0xa42 <__vector_18+0x124>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <__vector_18+0x12e>
				_delay_ms(1000);
				USER_TRANSMIT_START(MENU);
 a4c:	00 00       	nop
 a4e:	8a e0       	ldi	r24, 0x0A	; 10
 a50:	91 e0       	ldi	r25, 0x01	; 1
 a52:	c3 dc       	rcall	.-1658   	; 0x3da <USER_TRANSMIT_START>
				break;
			}
		}
		// reset pointer to 0
		user_input_buffer_ptr = 0;
 a54:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <user_input_buffer_ptr>
	}
}
 a58:	ff 91       	pop	r31
 a5a:	ef 91       	pop	r30
 a5c:	bf 91       	pop	r27
 a5e:	af 91       	pop	r26
 a60:	9f 91       	pop	r25
 a62:	8f 91       	pop	r24
 a64:	7f 91       	pop	r23
 a66:	6f 91       	pop	r22
 a68:	5f 91       	pop	r21
 a6a:	4f 91       	pop	r20
 a6c:	3f 91       	pop	r19
 a6e:	2f 91       	pop	r18
 a70:	1f 91       	pop	r17
 a72:	0f 91       	pop	r16
 a74:	0f 90       	pop	r0
 a76:	0b be       	out	0x3b, r0	; 59
 a78:	0f 90       	pop	r0
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	0f 90       	pop	r0
 a7e:	1f 90       	pop	r1
 a80:	18 95       	reti

00000a82 <main>:
	// reset eeprom, ONLY for demo purposes!
	/*SAVE_TO_EEPROM(0x00, 0xFF);
	SAVE_TO_EEPROM(0x01, 0xFF);
	SAVE_TO_EEPROM(0x02, 0xFF);*/
	
	startI();
 a82:	46 df       	rcall	.-372    	; 0x910 <startI>
	
	enableWD(); // enables watchdog timer if setup
 a84:	22 df       	rcall	.-444    	; 0x8ca <enableWD>
 a86:	85 b7       	in	r24, 0x35	; 53
	while(1){ // waits for user or sensor interrupts
		sleep_enable(); // arm sleep mode
 a88:	80 62       	ori	r24, 0x20	; 32
 a8a:	85 bf       	out	0x35, r24	; 53
 a8c:	88 95       	sleep
		sleep_cpu(); // put CPU to sleep
 a8e:	fb cf       	rjmp	.-10     	; 0xa86 <main+0x4>

00000a90 <__tablejump2__>:
 a90:	ee 0f       	add	r30, r30
 a92:	ff 1f       	adc	r31, r31
 a94:	00 24       	eor	r0, r0
 a96:	00 1c       	adc	r0, r0
 a98:	0b be       	out	0x3b, r0	; 59
 a9a:	07 90       	elpm	r0, Z+
 a9c:	f6 91       	elpm	r31, Z
 a9e:	e0 2d       	mov	r30, r0
 aa0:	09 94       	ijmp

00000aa2 <__mulshisi3>:
 aa2:	b7 ff       	sbrs	r27, 7
 aa4:	04 c0       	rjmp	.+8      	; 0xaae <__muluhisi3>

00000aa6 <__mulohisi3>:
 aa6:	03 d0       	rcall	.+6      	; 0xaae <__muluhisi3>
 aa8:	82 1b       	sub	r24, r18
 aaa:	93 0b       	sbc	r25, r19
 aac:	08 95       	ret

00000aae <__muluhisi3>:
 aae:	09 d0       	rcall	.+18     	; 0xac2 <__umulhisi3>
 ab0:	a5 9f       	mul	r26, r21
 ab2:	90 0d       	add	r25, r0
 ab4:	b4 9f       	mul	r27, r20
 ab6:	90 0d       	add	r25, r0
 ab8:	a4 9f       	mul	r26, r20
 aba:	80 0d       	add	r24, r0
 abc:	91 1d       	adc	r25, r1
 abe:	11 24       	eor	r1, r1
 ac0:	08 95       	ret

00000ac2 <__umulhisi3>:
 ac2:	a2 9f       	mul	r26, r18
 ac4:	b0 01       	movw	r22, r0
 ac6:	b3 9f       	mul	r27, r19
 ac8:	c0 01       	movw	r24, r0
 aca:	a3 9f       	mul	r26, r19
 acc:	70 0d       	add	r23, r0
 ace:	81 1d       	adc	r24, r1
 ad0:	11 24       	eor	r1, r1
 ad2:	91 1d       	adc	r25, r1
 ad4:	b2 9f       	mul	r27, r18
 ad6:	70 0d       	add	r23, r0
 ad8:	81 1d       	adc	r24, r1
 ada:	11 24       	eor	r1, r1
 adc:	91 1d       	adc	r25, r1
 ade:	08 95       	ret

00000ae0 <strcpy>:
 ae0:	fb 01       	movw	r30, r22
 ae2:	dc 01       	movw	r26, r24
 ae4:	01 90       	ld	r0, Z+
 ae6:	0d 92       	st	X+, r0
 ae8:	00 20       	and	r0, r0
 aea:	e1 f7       	brne	.-8      	; 0xae4 <strcpy+0x4>
 aec:	08 95       	ret

00000aee <_exit>:
 aee:	f8 94       	cli

00000af0 <__stop_program>:
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <__stop_program>
