
LabModule3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00000a12  00000aa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d94  00800234  00800234  00000bda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015e3  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9e  00000000  00000000  0000231b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb1  00000000  00000000  00002db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  0000396c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000724  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6a  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c2       	rjmp	.+1336   	; 0x572 <__vector_14>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	0b c4       	rjmp	.+2070   	; 0x860 <__vector_18>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7b c1       	rjmp	.+758    	; 0x348 <__vector_20>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	2d c1       	rjmp	.+602    	; 0x2d0 <__vector_29>
  76:	00 00       	nop
  78:	f0 c2       	rjmp	.+1504   	; 0x65a <__vector_30>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	28 04       	cpc	r2, r8
  8e:	28 04       	cpc	r2, r8
  90:	24 04       	cpc	r2, r4
  92:	11 04       	cpc	r1, r1
  94:	26 04       	cpc	r2, r6
  96:	13 04       	cpc	r1, r3
  98:	15 04       	cpc	r1, r5
  9a:	17 04       	cpc	r1, r7
  9c:	19 04       	cpc	r1, r9

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e1       	ldi	r29, 0x10	; 16
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	12 e0       	ldi	r17, 0x02	; 2
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	e2 e1       	ldi	r30, 0x12	; 18
  b2:	fa e0       	ldi	r31, 0x0A	; 10
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a4 33       	cpi	r26, 0x34	; 52
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	2f e0       	ldi	r18, 0x0F	; 15
  c6:	a4 e3       	ldi	r26, 0x34	; 52
  c8:	b2 e0       	ldi	r27, 0x02	; 2
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a8 3c       	cpi	r26, 0xC8	; 200
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	66 d4       	rcall	.+2252   	; 0x9a2 <main>
  d6:	9b c4       	rjmp	.+2358   	; 0xa0e <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <CRC3>:
#define gen 0x35 // generator polynomial

unsigned char CRC3(unsigned char command) {
	unsigned char crc = command & 0xE0;// isolate first 3 bits, 11100000
  da:	98 2f       	mov	r25, r24
  dc:	90 7e       	andi	r25, 0xE0	; 224
	
	crc = crc>>2; // align with generator
  de:	96 95       	lsr	r25
  e0:	96 95       	lsr	r25
	if( crc >= 0x20)
  e2:	90 32       	cpi	r25, 0x20	; 32
  e4:	38 f0       	brcs	.+14     	; 0xf4 <CRC3+0x1a>
	crc = crc^gen;
  e6:	25 e3       	ldi	r18, 0x35	; 53
  e8:	92 27       	eor	r25, r18
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <CRC3+0x1a>

	for( int i = 0; i < 2; i++) {
		crc = crc<<1;
		if( crc >= 0x20)
		crc = crc^gen;
  ec:	25 e3       	ldi	r18, 0x35	; 53
  ee:	92 27       	eor	r25, r18
		
	}
	
	command |= crc;
	return command;
  f0:	89 2b       	or	r24, r25
  f2:	08 95       	ret
	crc = crc>>2; // align with generator
	if( crc >= 0x20)
	crc = crc^gen;

	for( int i = 0; i < 2; i++) {
		crc = crc<<1;
  f4:	99 0f       	add	r25, r25
		if( crc >= 0x20)
  f6:	90 32       	cpi	r25, 0x20	; 32
  f8:	10 f0       	brcs	.+4      	; 0xfe <CRC3+0x24>
		crc = crc^gen;
  fa:	25 e3       	ldi	r18, 0x35	; 53
  fc:	92 27       	eor	r25, r18
	crc = crc>>2; // align with generator
	if( crc >= 0x20)
	crc = crc^gen;

	for( int i = 0; i < 2; i++) {
		crc = crc<<1;
  fe:	99 0f       	add	r25, r25
		if( crc >= 0x20)
 100:	90 32       	cpi	r25, 0x20	; 32
 102:	a0 f7       	brcc	.-24     	; 0xec <CRC3+0x12>
 104:	f5 cf       	rjmp	.-22     	; 0xf0 <CRC3+0x16>

00000106 <CRC_CHECK3>:
	command |= crc;
	return command;
	
}

unsigned char CRC_CHECK3(unsigned char command) {
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
	unsigned char true_crc = CRC3(command);
 10a:	e7 df       	rcall	.-50     	; 0xda <CRC3>
	unsigned char return_value = 0x00;
	if ( true_crc == command )
	return_value = 0xFF;
	
	return return_value;
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	c8 13       	cpse	r28, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
}
 112:	89 2f       	mov	r24, r25
 114:	81 95       	neg	r24
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <CRC_CHECK11>:

unsigned char CRC_CHECK11(unsigned char command) {
	unsigned char crc_bits = command&0x1F;
 11a:	68 2f       	mov	r22, r24
 11c:	6f 71       	andi	r22, 0x1F	; 31
	unsigned char data = TOS;
 11e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <TOS>
	unsigned char temp = 0;
	//unsigned char org_com = command, org_dat = data;
	
	command = command & 0xE0;// isolate first 3 bits, 11100000
 122:	80 7e       	andi	r24, 0xE0	; 224
	// packet DDDDDDDD
	
	temp = data & 0b11;
	// temp   000000DD
	
	temp = temp<<6;
 124:	29 2f       	mov	r18, r25
 126:	22 95       	swap	r18
 128:	22 0f       	add	r18, r18
 12a:	22 0f       	add	r18, r18
 12c:	20 7c       	andi	r18, 0xC0	; 192
	// temp	  DD000000
	
	data = data>>2; // align with polynomial
 12e:	96 95       	lsr	r25
 130:	96 95       	lsr	r25
	// data   00DDDDDD
	
	if( data >= 0x20 )
 132:	90 32       	cpi	r25, 0x20	; 32
 134:	10 f0       	brcs	.+4      	; 0x13a <CRC_CHECK11+0x20>
	data ^= gen;
 136:	35 e3       	ldi	r19, 0x35	; 53
 138:	93 27       	eor	r25, r19
	
	data = data<<1 | temp>> 7; // data 0DDDDDDT (lsb of data from temp)
 13a:	99 0f       	add	r25, r25
 13c:	32 2f       	mov	r19, r18
 13e:	33 1f       	adc	r19, r19
 140:	33 27       	eor	r19, r19
 142:	33 1f       	adc	r19, r19
 144:	93 2b       	or	r25, r19
	temp = temp<<1; // T0000000
 146:	22 0f       	add	r18, r18
	if( data >= 0x20 )
 148:	90 32       	cpi	r25, 0x20	; 32
 14a:	10 f0       	brcs	.+4      	; 0x150 <CRC_CHECK11+0x36>
	data ^= gen;
 14c:	35 e3       	ldi	r19, 0x35	; 53
 14e:	93 27       	eor	r25, r19
	
	
	data = data<<1 | temp>>7; // data DDDDDDTT ( lsb of data from temp)
 150:	99 0f       	add	r25, r25
 152:	22 1f       	adc	r18, r18
 154:	22 27       	eor	r18, r18
 156:	22 1f       	adc	r18, r18
 158:	92 2b       	or	r25, r18
	if( data >= 0x20 )
 15a:	90 32       	cpi	r25, 0x20	; 32
 15c:	a8 f0       	brcs	.+42     	; 0x188 <CRC_CHECK11+0x6e>
	data ^= gen;
 15e:	25 e3       	ldi	r18, 0x35	; 53
 160:	92 27       	eor	r25, r18
 162:	12 c0       	rjmp	.+36     	; 0x188 <CRC_CHECK11+0x6e>
	
	// data DDDDDDDD
	for (int i=0; i < 8; i++){
		data = data<<1 | command>> 7;// data DDDDDDDC
 164:	99 0f       	add	r25, r25
 166:	48 2f       	mov	r20, r24
 168:	44 1f       	adc	r20, r20
 16a:	44 27       	eor	r20, r20
 16c:	44 1f       	adc	r20, r20
 16e:	94 2b       	or	r25, r20
		command = command<<1;		// cmd CCCCCCC0
 170:	88 0f       	add	r24, r24
		if ( data >= 0x20 )
 172:	90 32       	cpi	r25, 0x20	; 32
 174:	08 f0       	brcs	.+2      	; 0x178 <CRC_CHECK11+0x5e>
		data ^= gen;
 176:	95 27       	eor	r25, r21
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	31 09       	sbc	r19, r1
	data = data<<1 | temp>>7; // data DDDDDDTT ( lsb of data from temp)
	if( data >= 0x20 )
	data ^= gen;
	
	// data DDDDDDDD
	for (int i=0; i < 8; i++){
 17c:	99 f7       	brne	.-26     	; 0x164 <CRC_CHECK11+0x4a>
	unsigned char return_value = 0x00;
	
	if (data == crc_bits)
	return_value = 0xFF;
	
	return return_value;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	96 13       	cpse	r25, r22
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	81 95       	neg	r24
 186:	08 95       	ret
	return_value = 0xFF;
	
	return return_value;
}

unsigned char CRC_CHECK11(unsigned char command) {
 188:	28 e0       	ldi	r18, 0x08	; 8
 18a:	30 e0       	ldi	r19, 0x00	; 0
	// data DDDDDDDD
	for (int i=0; i < 8; i++){
		data = data<<1 | command>> 7;// data DDDDDDDC
		command = command<<1;		// cmd CCCCCCC0
		if ( data >= 0x20 )
		data ^= gen;
 18c:	55 e3       	ldi	r21, 0x35	; 53
 18e:	ea cf       	rjmp	.-44     	; 0x164 <CRC_CHECK11+0x4a>

00000190 <rollDataPointer>:
char wdSaved; // if timeout counter is already saved in eeprom
char watchdogSetting;

// increment the data pointer, if it is over the limit, set back to 0
void rollDataPointer(){
	dataPointer++;
 190:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <dataPointer>
 194:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <dataPointer+0x1>
 198:	01 96       	adiw	r24, 0x01	; 1
	if(dataPointer > 3199)
 19a:	80 38       	cpi	r24, 0x80	; 128
 19c:	2c e0       	ldi	r18, 0x0C	; 12
 19e:	92 07       	cpc	r25, r18
 1a0:	28 f4       	brcc	.+10     	; 0x1ac <rollDataPointer+0x1c>
char wdSaved; // if timeout counter is already saved in eeprom
char watchdogSetting;

// increment the data pointer, if it is over the limit, set back to 0
void rollDataPointer(){
	dataPointer++;
 1a2:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <dataPointer+0x1>
 1a6:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <dataPointer>
 1aa:	08 95       	ret
	if(dataPointer > 3199)
	dataPointer = 0;
 1ac:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <dataPointer+0x1>
 1b0:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <dataPointer>
 1b4:	08 95       	ret

000001b6 <START_TIMER>:
#define LOG_REQUEST    0x20  // 0010 0000

// start a timer
void START_TIMER(char timer){
	// timeout timer 1
	if(timer == 0 && timeOutCount > 0){
 1b6:	81 11       	cpse	r24, r1
 1b8:	10 c0       	rjmp	.+32     	; 0x1da <START_TIMER+0x24>
 1ba:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timeOutCount>
 1be:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <timeOutCount+0x1>
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	f1 f0       	breq	.+60     	; 0x202 <START_TIMER+0x4c>
		TCNT1H = (timeOutCount&0xFF00)>>8;
 1c6:	9d bd       	out	0x2d, r25	; 45
		TCNT1L = timeOutCount&0x00FF;
 1c8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timeOutCount>
 1cc:	8c bd       	out	0x2c, r24	; 44
		TCCR1A = 0;
 1ce:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = (1<<CS10) | (1<<CS12);
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	8e bd       	out	0x2e, r24	; 46
		TIMSK = (1<<TOIE1);
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	87 bf       	out	0x37, r24	; 55
 1d8:	08 95       	ret
	}
	// timeout timer 3
	else if(timeOutCount > 0){
 1da:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timeOutCount>
 1de:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <timeOutCount+0x1>
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	71 f0       	breq	.+28     	; 0x202 <START_TIMER+0x4c>
		TCNT3H = (timeOutCount&0xFF00)>>8;
 1e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		TCNT3L = timeOutCount&0x00FF;
 1ea:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timeOutCount>
 1ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TCCR3A = 0;
 1f2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
		TCCR3B = (1<<CS30) | (1<<CS32);
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		ETIMSK = (1<<TOIE3);
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 202:	08 95       	ret

00000204 <STOP_TIMER>:
	}
}

// stop a timer
void STOP_TIMER(char timer){
	if(timer == 0){
 204:	81 11       	cpse	r24, r1
 206:	0a c0       	rjmp	.+20     	; 0x21c <STOP_TIMER+0x18>
		TCCR1B &= ~(1<<CS10);
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	8e bd       	out	0x2e, r24	; 46
		TCCR1B &= ~(1<<CS12);
 20e:	8e b5       	in	r24, 0x2e	; 46
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	8e bd       	out	0x2e, r24	; 46
		TIMSK &= ~(1<<TOIE1);
 214:	87 b7       	in	r24, 0x37	; 55
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	87 bf       	out	0x37, r24	; 55
 21a:	08 95       	ret
	}
	else{
		TCCR3B &= ~(1<<CS30);
 21c:	ea e8       	ldi	r30, 0x8A	; 138
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	80 83       	st	Z, r24
		TCCR3B &= ~(1<<CS32);
 226:	80 81       	ld	r24, Z
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	80 83       	st	Z, r24
		ETIMSK &= ~(1<<TOIE3);
 22c:	ed e7       	ldi	r30, 0x7D	; 125
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	80 83       	st	Z, r24
 236:	08 95       	ret

00000238 <hex_to_chars>:
	TOS = 0;
	TOS_STATE = EMPTY;
}

// helper function to convert a byte sized number to 2 characters
void hex_to_chars(unsigned char hex, unsigned char * buffer){
 238:	fb 01       	movw	r30, r22
	buffer[0] = 0;
	buffer[1] = 0;
 23a:	11 82       	std	Z+1, r1	; 0x01
	
	buffer[0] = hex>>4;
 23c:	98 2f       	mov	r25, r24
 23e:	92 95       	swap	r25
 240:	9f 70       	andi	r25, 0x0F	; 15
 242:	90 83       	st	Z, r25
	if(buffer[0] >= 0 && buffer[0] <= 9)
 244:	9a 30       	cpi	r25, 0x0A	; 10
 246:	18 f4       	brcc	.+6      	; 0x24e <hex_to_chars+0x16>
	buffer[0] += '0';
 248:	90 5d       	subi	r25, 0xD0	; 208
 24a:	90 83       	st	Z, r25
 24c:	02 c0       	rjmp	.+4      	; 0x252 <hex_to_chars+0x1a>
	else
	buffer[0] += 'A' - 10;
 24e:	99 5c       	subi	r25, 0xC9	; 201
 250:	90 83       	st	Z, r25
	
	buffer[1] = hex&0x0F;
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	81 83       	std	Z+1, r24	; 0x01
	if(buffer[1] >= 0 && buffer[1] <= 9)
 256:	8a 30       	cpi	r24, 0x0A	; 10
 258:	18 f4       	brcc	.+6      	; 0x260 <hex_to_chars+0x28>
	buffer[1] += '0';
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	81 83       	std	Z+1, r24	; 0x01
 25e:	02 c0       	rjmp	.+4      	; 0x264 <hex_to_chars+0x2c>
	else
	buffer[1] += 'A' - 10;
 260:	89 5c       	subi	r24, 0xC9	; 201
 262:	81 83       	std	Z+1, r24	; 0x01
	
	buffer[2] = ',';
 264:	8c e2       	ldi	r24, 0x2C	; 44
 266:	82 83       	std	Z+2, r24	; 0x02
	buffer[3] = '\0';
 268:	13 82       	std	Z+3, r1	; 0x03
 26a:	08 95       	ret

0000026c <SYS_CONFIG>:
}

// configures the system, runs only once or when reset
void SYS_CONFIG(){
	// Port configurations
	DDRB |= 0x01; // used to show watchdoge timer
 26c:	b8 9a       	sbi	0x17, 0	; 23
	
	// XMEM
	MCUCR = 0X80; // 1000 0000
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	85 bf       	out	0x35, r24	; 53
	
	// USART 0, BLUETOOTH
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); // setting data width to 8
 272:	96 e0       	ldi	r25, 0x06	; 6
 274:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = (BR_Calc>>8); // setting baud rate to 9600 by setting UBBR
 278:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = BR_Calc;
 27c:	83 e3       	ldi	r24, 0x33	; 51
 27e:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<TXEN0) | (1<<RXCIE0)| (1<<TXCIE0) | (1<<RXEN0); // enable transmitter, receiver, and receive and transmit complete interrupts
 280:	28 ed       	ldi	r18, 0xD8	; 216
 282:	2a b9       	out	0x0a, r18	; 10
	
	
	// USART 1, XBEE
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10); // setting data width to 8
 284:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = (BR_Calc>>8); // setting baud rate to 9600 by setting UBBR
 288:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = BR_Calc;
 28c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1<<TXEN1) | (1<<RXCIE1) | (1<<RXEN1);; // enable transmitter, receiver, and receive and transmit complete interrupts
 290:	88 e9       	ldi	r24, 0x98	; 152
 292:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	
	sei(); // enable global interrupts
 296:	78 94       	sei
 298:	08 95       	ret

0000029a <LOG_REQUEST_FUNCTION>:
}

// function that takes in a byte sized number and logs it in data then rolls the pointer forward
void LOG_REQUEST_FUNCTION(unsigned char packet_in){
	data[dataPointer] = packet_in;
 29a:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <dataPointer>
 29e:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <dataPointer+0x1>
 2a2:	eb 5b       	subi	r30, 0xBB	; 187
 2a4:	fc 4f       	sbci	r31, 0xFC	; 252
 2a6:	80 83       	st	Z, r24
	rollDataPointer();
 2a8:	73 cf       	rjmp	.-282    	; 0x190 <rollDataPointer>
 2aa:	08 95       	ret

000002ac <SENSOR_TRANSMIT>:
}

// transmits a single byte of data to the sensor
void SENSOR_TRANSMIT(unsigned char sensor_packet_out) {
	while(!(UCSR1A & (1<<UDRE1)))
 2ac:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 2b0:	95 fd       	sbrc	r25, 5
 2b2:	0b c0       	rjmp	.+22     	; 0x2ca <SENSOR_TRANSMIT+0x1e>
 2b4:	eb e9       	ldi	r30, 0x9B	; 155
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	af ec       	ldi	r26, 0xCF	; 207
 2ba:	b7 e0       	ldi	r27, 0x07	; 7
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <SENSOR_TRANSMIT+0x10>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <SENSOR_TRANSMIT+0x16>
 2c2:	00 00       	nop
 2c4:	90 81       	ld	r25, Z
 2c6:	95 ff       	sbrs	r25, 5
 2c8:	f7 cf       	rjmp	.-18     	; 0x2b8 <SENSOR_TRANSMIT+0xc>
	_delay_ms(1);

	UDR1 = sensor_packet_out;
 2ca:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2ce:	08 95       	ret

000002d0 <__vector_29>:
	sleep_disable();
	INIT();
}

// timeout timer 3 triggered, send repeat request to sensor
ISR (TIMER3_OVF_vect){
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	0b b6       	in	r0, 0x3b	; 59
 2dc:	0f 92       	push	r0
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	4f 93       	push	r20
 2e4:	5f 93       	push	r21
 2e6:	6f 93       	push	r22
 2e8:	7f 93       	push	r23
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	sleep_disable();
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	85 bf       	out	0x35, r24	; 53
	SENSOR_TRANSMIT((REPEAT_REQUEST));
 2fc:	80 ee       	ldi	r24, 0xE0	; 224
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	d5 df       	rcall	.-86     	; 0x2ac <SENSOR_TRANSMIT>
	TOS = 0;
 302:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TOS>
	TOS_STATE = EMPTY;
 306:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TOS_STATE>
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0b be       	out	0x3b, r0	; 59
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <USER_TRANSMIT>:
	UDR1 = sensor_packet_out;
}

// transmits a single byte of data to the user -- DO NOT USE!!: Use "USER_TRANSMIT_START" instead
void USER_TRANSMIT(unsigned char user_packet_out) {
	while(!(UCSR0A & (1<<UDRE0)))
 330:	5d 99       	sbic	0x0b, 5	; 11
 332:	08 c0       	rjmp	.+16     	; 0x344 <USER_TRANSMIT+0x14>
 334:	ef ec       	ldi	r30, 0xCF	; 207
 336:	f7 e0       	ldi	r31, 0x07	; 7
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <USER_TRANSMIT+0x8>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <USER_TRANSMIT+0xe>
 33e:	00 00       	nop
 340:	5d 9b       	sbis	0x0b, 5	; 11
 342:	f8 cf       	rjmp	.-16     	; 0x334 <USER_TRANSMIT+0x4>
	_delay_ms(1);

	UDR0 = user_packet_out;
 344:	8c b9       	out	0x0c, r24	; 12
 346:	08 95       	ret

00000348 <__vector_20>:
char user_output_buffer_ptr = 0;
char bluetoothSending = 0;
char user_output_buffer_size = 0;

// bluetooth tx
ISR(USART0_TX_vect) {
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	0b b6       	in	r0, 0x3b	; 59
 354:	0f 92       	push	r0
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	sleep_disable(); // disable sleep
 36e:	85 b7       	in	r24, 0x35	; 53
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	85 bf       	out	0x35, r24	; 53
	if(user_output_buffer[user_output_buffer_ptr] != '\0' && bluetoothSending){ // if still sending data
 374:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <user_output_buffer_ptr>
 378:	e9 2f       	mov	r30, r25
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	ea 5b       	subi	r30, 0xBA	; 186
 37e:	fd 4f       	sbci	r31, 0xFD	; 253
 380:	80 81       	ld	r24, Z
 382:	88 23       	and	r24, r24
 384:	b9 f0       	breq	.+46     	; 0x3b4 <__vector_20+0x6c>
 386:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <bluetoothSending>
 38a:	22 23       	and	r18, r18
 38c:	99 f0       	breq	.+38     	; 0x3b4 <__vector_20+0x6c>
		USER_TRANSMIT(user_output_buffer[user_output_buffer_ptr++]); // send next byte of data from buffer to usart
 38e:	9f 5f       	subi	r25, 0xFF	; 255
 390:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <user_output_buffer_ptr>
 394:	cd df       	rcall	.-102    	; 0x330 <USER_TRANSMIT>
		if(user_output_buffer_ptr == user_output_buffer_size || user_output_buffer[user_output_buffer_ptr] == '\0') // if just sent last byte, set state to not sending
 396:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <user_output_buffer_ptr>
 39a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <user_output_buffer_size>
 39e:	e8 17       	cp	r30, r24
 3a0:	31 f0       	breq	.+12     	; 0x3ae <__vector_20+0x66>
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ea 5b       	subi	r30, 0xBA	; 186
 3a6:	fd 4f       	sbci	r31, 0xFD	; 253
 3a8:	80 81       	ld	r24, Z
 3aa:	81 11       	cpse	r24, r1
 3ac:	07 c0       	rjmp	.+14     	; 0x3bc <__vector_20+0x74>
			bluetoothSending = 0;
 3ae:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <bluetoothSending>
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <__vector_20+0x74>
	}
	else{ // if not sending, reset pointers
		user_output_buffer_ptr = 0;
 3b4:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <user_output_buffer_ptr>
		user_output_buffer_size = 0;
 3b8:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <user_output_buffer_size>
	}
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0b be       	out	0x3b, r0	; 59
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <chars_to_hex>:
// sensor input buffers, only sized 2 bytes
unsigned char sensor_input_buffer [2];
unsigned char sensor_input_buffer_ptr = 0;

// helper function that converts 2 ascii characters into a byte number
unsigned char chars_to_hex(unsigned char buffer[]){
 3e2:	fc 01       	movw	r30, r24
	unsigned char number = 0;
	if(buffer[0] <= '9' && buffer[0] >= '0')
 3e4:	90 81       	ld	r25, Z
 3e6:	80 ed       	ldi	r24, 0xD0	; 208
 3e8:	89 0f       	add	r24, r25
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	20 f4       	brcc	.+8      	; 0x3f6 <chars_to_hex+0x14>
	number += (buffer[0] - '0') * 16;
 3ee:	89 2f       	mov	r24, r25
 3f0:	82 95       	swap	r24
 3f2:	80 7f       	andi	r24, 0xF0	; 240
 3f4:	13 c0       	rjmp	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	else if(buffer[0] >= 'a' && buffer[0] <= 'f')
 3f6:	8f e9       	ldi	r24, 0x9F	; 159
 3f8:	89 0f       	add	r24, r25
 3fa:	86 30       	cpi	r24, 0x06	; 6
 3fc:	28 f4       	brcc	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	number += (buffer[0] - 'a' + 10) * 16;
 3fe:	92 95       	swap	r25
 400:	90 7f       	andi	r25, 0xF0	; 240
 402:	80 e9       	ldi	r24, 0x90	; 144
 404:	89 0f       	add	r24, r25
 406:	0a c0       	rjmp	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	else if(buffer[0] >= 'A' && buffer[0] <= 'F')
 408:	8f eb       	ldi	r24, 0xBF	; 191
 40a:	89 0f       	add	r24, r25
 40c:	86 30       	cpi	r24, 0x06	; 6
 40e:	28 f4       	brcc	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	number += (buffer[0] - 'A' + 10) * 16;
 410:	92 95       	swap	r25
 412:	90 7f       	andi	r25, 0xF0	; 240
 414:	80 e9       	ldi	r24, 0x90	; 144
 416:	89 0f       	add	r24, r25
 418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
unsigned char sensor_input_buffer [2];
unsigned char sensor_input_buffer_ptr = 0;

// helper function that converts 2 ascii characters into a byte number
unsigned char chars_to_hex(unsigned char buffer[]){
	unsigned char number = 0;
 41a:	80 e0       	ldi	r24, 0x00	; 0
	else if(buffer[0] >= 'a' && buffer[0] <= 'f')
	number += (buffer[0] - 'a' + 10) * 16;
	else if(buffer[0] >= 'A' && buffer[0] <= 'F')
	number += (buffer[0] - 'A' + 10) * 16;
	
	if(buffer[1] <= '9' && buffer[1] >= '0')
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	20 ed       	ldi	r18, 0xD0	; 208
 420:	29 0f       	add	r18, r25
 422:	2a 30       	cpi	r18, 0x0A	; 10
 424:	10 f4       	brcc	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	number += (buffer[1] - '0');
 426:	82 0f       	add	r24, r18
 428:	08 95       	ret
	else if(buffer[1] >= 'a' && buffer[1] <= 'f')
 42a:	2f e9       	ldi	r18, 0x9F	; 159
 42c:	29 0f       	add	r18, r25
 42e:	26 30       	cpi	r18, 0x06	; 6
 430:	18 f4       	brcc	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	number += (buffer[1] - 'a' + 10);
 432:	97 55       	subi	r25, 0x57	; 87
 434:	89 0f       	add	r24, r25
 436:	08 95       	ret
	else if(buffer[1] >= 'A' && buffer[1] <= 'F')
 438:	2f eb       	ldi	r18, 0xBF	; 191
 43a:	29 0f       	add	r18, r25
 43c:	26 30       	cpi	r18, 0x06	; 6
 43e:	10 f4       	brcc	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	number += (buffer[1] - 'A' + 10);
 440:	97 53       	subi	r25, 0x37	; 55
 442:	89 0f       	add	r24, r25
	
	return number;
}
 444:	08 95       	ret

00000446 <USER_TRANSMIT_START>:
		TREAT_SENSOR_DATA(chars_to_hex(sensor_input_buffer)); // send to treat data function
	}
}

// function used to transmit a string of bytes to the user
void USER_TRANSMIT_START(char string[]){
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
	while(bluetoothSending){ // if a previous transmission is going on, wait, woken up by last tx interrupt
 44c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <bluetoothSending>
 450:	88 23       	and	r24, r24
 452:	41 f0       	breq	.+16     	; 0x464 <USER_TRANSMIT_START+0x1e>
		sleep_enable(); // arm sleep mode
 454:	85 b7       	in	r24, 0x35	; 53
 456:	80 62       	ori	r24, 0x20	; 32
 458:	85 bf       	out	0x35, r24	; 53
		sleep_cpu(); // put CPU to sleep
 45a:	88 95       	sleep
	}
}

// function used to transmit a string of bytes to the user
void USER_TRANSMIT_START(char string[]){
	while(bluetoothSending){ // if a previous transmission is going on, wait, woken up by last tx interrupt
 45c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <bluetoothSending>
 460:	81 11       	cpse	r24, r1
 462:	f8 cf       	rjmp	.-16     	; 0x454 <USER_TRANSMIT_START+0xe>
		sleep_enable(); // arm sleep mode
		sleep_cpu(); // put CPU to sleep
	}
		
	bluetoothSending = 1; // set transmission state so next calls need to wait until this is done
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <bluetoothSending>
	strcpy(user_output_buffer, string); // copy the string to the buffer
 46a:	be 01       	movw	r22, r28
 46c:	86 e4       	ldi	r24, 0x46	; 70
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	c7 d2       	rcall	.+1422   	; 0xa00 <strcpy>
	user_output_buffer_size = strlen(string)+1; // set the length of the buffer
 472:	fe 01       	movw	r30, r28
 474:	01 90       	ld	r0, Z+
 476:	00 20       	and	r0, r0
 478:	e9 f7       	brne	.-6      	; 0x474 <USER_TRANSMIT_START+0x2e>
 47a:	ec 1b       	sub	r30, r28
 47c:	e0 93 35 02 	sts	0x0235, r30	; 0x800235 <user_output_buffer_size>
	user_output_buffer[user_output_buffer_size-1] = '\0';
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	eb 5b       	subi	r30, 0xBB	; 187
 484:	fd 4f       	sbci	r31, 0xFD	; 253
 486:	10 82       	st	Z, r1
	user_output_buffer_ptr = 0; // reset the buffer pointer
 488:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <user_output_buffer_ptr>
	USER_TRANSMIT(' '); // start the first byte transmission, the rest is handled by the tx interrupt
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	50 df       	rcall	.-352    	; 0x330 <USER_TRANSMIT>
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <SERVICE_READOUT>:
	buffer[2] = ',';
	buffer[3] = '\0';
}

// function that transmits the content of the logged data to the user
void SERVICE_READOUT(char user_input) {
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <SERVICE_READOUT+0xe>
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <SERVICE_READOUT+0x10>
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
	if(dataPointer == 0){
 4aa:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <dataPointer>
 4ae:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <dataPointer+0x1>
 4b2:	23 2b       	or	r18, r19
 4b4:	21 f4       	brne	.+8      	; 0x4be <SERVICE_READOUT+0x28>
		USER_TRANSMIT_START("No data ");
 4b6:	80 e4       	ldi	r24, 0x40	; 64
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	c5 df       	rcall	.-118    	; 0x446 <USER_TRANSMIT_START>
 4bc:	41 c0       	rjmp	.+130    	; 0x540 <SERVICE_READOUT+0xaa>
		return;
	}
	unsigned char tempBuffer[4]; // used to convert numbers to characters

	if(user_input == 0) { // mem dump
 4be:	81 11       	cpse	r24, r1
 4c0:	2e c0       	rjmp	.+92     	; 0x51e <SERVICE_READOUT+0x88>
		USER_TRANSMIT_START("STARTING MEM DUMP: ");
 4c2:	89 e4       	ldi	r24, 0x49	; 73
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	bf df       	rcall	.-130    	; 0x446 <USER_TRANSMIT_START>
		for(int i = 0; i < dataPointer; i++ ) {
 4c8:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <dataPointer>
 4cc:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <dataPointer+0x1>
 4d0:	89 2b       	or	r24, r25
 4d2:	b1 f1       	breq	.+108    	; 0x540 <SERVICE_READOUT+0xaa>
 4d4:	0f 2e       	mov	r0, r31
 4d6:	f5 e4       	ldi	r31, 0x45	; 69
 4d8:	ef 2e       	mov	r14, r31
 4da:	f3 e0       	ldi	r31, 0x03	; 3
 4dc:	ff 2e       	mov	r15, r31
 4de:	f0 2d       	mov	r31, r0
 4e0:	00 e0       	ldi	r16, 0x00	; 0
 4e2:	10 e0       	ldi	r17, 0x00	; 0
			hex_to_chars(data[i], tempBuffer);
 4e4:	be 01       	movw	r22, r28
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	f7 01       	movw	r30, r14
 4ec:	81 91       	ld	r24, Z+
 4ee:	7f 01       	movw	r14, r30
 4f0:	a3 de       	rcall	.-698    	; 0x238 <hex_to_chars>
			USER_TRANSMIT_START(tempBuffer);
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	a7 df       	rcall	.-178    	; 0x446 <USER_TRANSMIT_START>
 4f8:	ff ef       	ldi	r31, 0xFF	; 255
 4fa:	29 e6       	ldi	r18, 0x69	; 105
 4fc:	88 e1       	ldi	r24, 0x18	; 24
 4fe:	f1 50       	subi	r31, 0x01	; 1
 500:	20 40       	sbci	r18, 0x00	; 0
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <SERVICE_READOUT+0x68>
 506:	00 c0       	rjmp	.+0      	; 0x508 <SERVICE_READOUT+0x72>
 508:	00 00       	nop
 50a:	0f 5f       	subi	r16, 0xFF	; 255
	}
	unsigned char tempBuffer[4]; // used to convert numbers to characters

	if(user_input == 0) { // mem dump
		USER_TRANSMIT_START("STARTING MEM DUMP: ");
		for(int i = 0; i < dataPointer; i++ ) {
 50c:	1f 4f       	sbci	r17, 0xFF	; 255
 50e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <dataPointer>
 512:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <dataPointer+0x1>
 516:	08 17       	cp	r16, r24
 518:	19 07       	cpc	r17, r25
 51a:	20 f3       	brcs	.-56     	; 0x4e4 <SERVICE_READOUT+0x4e>
 51c:	11 c0       	rjmp	.+34     	; 0x540 <SERVICE_READOUT+0xaa>
			USER_TRANSMIT_START(tempBuffer);
			_delay_ms(1000);
		}
	}
	else{ // last entry
		USER_TRANSMIT_START("Last Entry: ");
 51e:	8d e5       	ldi	r24, 0x5D	; 93
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	91 df       	rcall	.-222    	; 0x446 <USER_TRANSMIT_START>
 524:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <dataPointer>
		hex_to_chars(data[dataPointer - 1], tempBuffer);
 528:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <dataPointer+0x1>
 52c:	ec 5b       	subi	r30, 0xBC	; 188
 52e:	fc 4f       	sbci	r31, 0xFC	; 252
 530:	be 01       	movw	r22, r28
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	80 81       	ld	r24, Z
 538:	7f de       	rcall	.-770    	; 0x238 <hex_to_chars>
		USER_TRANSMIT_START(tempBuffer);
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	83 df       	rcall	.-250    	; 0x446 <USER_TRANSMIT_START>
 540:	0f 90       	pop	r0
	}
}
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	08 95       	ret

00000556 <INIT>:
 556:	80 e0       	ldi	r24, 0x00	; 0
	USER_TRANSMIT(' '); // start the first byte transmission, the rest is handled by the tx interrupt
}

// soft initialize, used to reset sensors
void INIT(){
	TOS = CRC3(RESET_REQUEST);
 558:	c0 dd       	rcall	.-1152   	; 0xda <CRC3>
 55a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TOS>
	SENSOR_TRANSMIT(TOS); // reset sensor
 55e:	a6 de       	rcall	.-692    	; 0x2ac <SENSOR_TRANSMIT>
 560:	81 e0       	ldi	r24, 0x01	; 1
	TOS_STATE = FULL;
 562:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <TOS_STATE>
	START_TIMER(0); // start timeout timer 1
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	26 de       	rcall	.-948    	; 0x1b6 <START_TIMER>
	USER_TRANSMIT_START("RESETTING SENSOR");
 56a:	8a e6       	ldi	r24, 0x6A	; 106
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	6b cf       	rjmp	.-298    	; 0x446 <USER_TRANSMIT_START>
 570:	08 95       	ret

00000572 <__vector_14>:
 572:	1f 92       	push	r1
		ETIMSK &= ~(1<<TOIE3);
	}
}

// timeout timer 1 triggered, send reset to sensor
ISR (TIMER1_OVF_vect){
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	0b b6       	in	r0, 0x3b	; 59
 57e:	0f 92       	push	r0
 580:	2f 93       	push	r18
 582:	3f 93       	push	r19
 584:	4f 93       	push	r20
 586:	5f 93       	push	r21
 588:	6f 93       	push	r22
 58a:	7f 93       	push	r23
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
 590:	af 93       	push	r26
 592:	bf 93       	push	r27
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31
	sleep_disable();
 598:	85 b7       	in	r24, 0x35	; 53
 59a:	8f 7d       	andi	r24, 0xDF	; 223
 59c:	85 bf       	out	0x35, r24	; 53
	INIT();
 59e:	db df       	rcall	.-74     	; 0x556 <INIT>
}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	0b be       	out	0x3b, r0	; 59
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <TREAT_SENSOR_DATA>:
	START_TIMER(0); // start timeout timer 1
	USER_TRANSMIT_START("RESETTING SENSOR");
}

// main function that deals with the sensor input protocol
void TREAT_SENSOR_DATA(unsigned char packet_in){
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	c8 2f       	mov	r28, r24
	SENSOR_TRANSMIT(packet_in);
 5cc:	6f de       	rcall	.-802    	; 0x2ac <SENSOR_TRANSMIT>
	
	if (((1<<7)&packet_in) == 0x80) {// if not command type, eg packet_in[7] == 1
 5ce:	cc 23       	and	r28, r28
 5d0:	3c f4       	brge	.+14     	; 0x5e0 <TREAT_SENSOR_DATA+0x1a>
		TOS = packet_in;
 5d2:	c0 93 3c 02 	sts	0x023C, r28	; 0x80023c <TOS>
		TOS_STATE = FULL;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <TOS_STATE>
		START_TIMER(1);
 5dc:	ec dd       	rcall	.-1064   	; 0x1b6 <START_TIMER>
	} else { // it is a command
		STOP_TIMER(1);
 5de:	3a c0       	rjmp	.+116    	; 0x654 <TREAT_SENSOR_DATA+0x8e>
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	10 de       	rcall	.-992    	; 0x204 <STOP_TIMER>
		if( ((1<<7)&TOS) == 0x80) { // if TOS has data packet
 5e4:	d0 91 3c 02 	lds	r29, 0x023C	; 0x80023c <TOS>
 5e8:	dd 23       	and	r29, r29
			unsigned char result = CRC_CHECK11(packet_in);
 5ea:	d4 f4       	brge	.+52     	; 0x620 <TREAT_SENSOR_DATA+0x5a>
 5ec:	8c 2f       	mov	r24, r28
 5ee:	95 dd       	rcall	.-1238   	; 0x11a <CRC_CHECK11>
			if (result==0xFF) { // If CRC_CHECK11 PASS
 5f0:	8f 3f       	cpi	r24, 0xFF	; 255
 5f2:	71 f4       	brne	.+28     	; 0x610 <TREAT_SENSOR_DATA+0x4a>
				if ( (packet_in&0xE0) == LOG_REQUEST ) { // if packet in is log request
 5f4:	c0 7e       	andi	r28, 0xE0	; 224
 5f6:	c0 32       	cpi	r28, 0x20	; 32
					LOG_REQUEST_FUNCTION(TOS & 0x1F);
 5f8:	49 f4       	brne	.+18     	; 0x60c <TREAT_SENSOR_DATA+0x46>
 5fa:	8d 2f       	mov	r24, r29
 5fc:	8f 71       	andi	r24, 0x1F	; 31
					TOS_STATE = EMPTY;
 5fe:	4d de       	rcall	.-870    	; 0x29a <LOG_REQUEST_FUNCTION>
					SENSOR_TRANSMIT(CRC3(ACNKOWLEDGE));
 600:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TOS_STATE>
 604:	80 e4       	ldi	r24, 0x40	; 64
 606:	69 dd       	rcall	.-1326   	; 0xda <CRC3>
 608:	51 de       	rcall	.-862    	; 0x2ac <SENSOR_TRANSMIT>
				}
				else{
					INIT();
 60a:	24 c0       	rjmp	.+72     	; 0x654 <TREAT_SENSOR_DATA+0x8e>
				}
			} else { // CRC_CHECK11 FAIL
				TOS_STATE = EMPTY;
 60c:	a4 df       	rcall	.-184    	; 0x556 <INIT>
				SENSOR_TRANSMIT(0xAA);
 60e:	22 c0       	rjmp	.+68     	; 0x654 <TREAT_SENSOR_DATA+0x8e>
 610:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TOS_STATE>
				SENSOR_TRANSMIT(CRC3(REPEAT_REQUEST));
 614:	8a ea       	ldi	r24, 0xAA	; 170
 616:	4a de       	rcall	.-876    	; 0x2ac <SENSOR_TRANSMIT>
 618:	80 ee       	ldi	r24, 0xE0	; 224
 61a:	5f dd       	rcall	.-1346   	; 0xda <CRC3>
 61c:	47 de       	rcall	.-882    	; 0x2ac <SENSOR_TRANSMIT>
			}
		} else { // If TOS does not have Data packet
			unsigned char result = CRC_CHECK3(packet_in);
 61e:	1a c0       	rjmp	.+52     	; 0x654 <TREAT_SENSOR_DATA+0x8e>
 620:	8c 2f       	mov	r24, r28
 622:	71 dd       	rcall	.-1310   	; 0x106 <CRC_CHECK3>
			if( result == 0xFF) { // if CRC_CHECK3 passes
 624:	8f 3f       	cpi	r24, 0xFF	; 255
 626:	89 f4       	brne	.+34     	; 0x64a <TREAT_SENSOR_DATA+0x84>
 628:	c0 7e       	andi	r28, 0xE0	; 224
				if ( (packet_in&0xE0) == ACNKOWLEDGE ) {
 62a:	c0 34       	cpi	r28, 0x40	; 64
 62c:	29 f4       	brne	.+10     	; 0x638 <TREAT_SENSOR_DATA+0x72>
					TOS_STATE = EMPTY;
 62e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TOS_STATE>
					STOP_TIMER(0);
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	e7 dd       	rcall	.-1074   	; 0x204 <STOP_TIMER>
				}
				else{ // not acknowledge
					if ( (packet_in&0xE0) == REPEAT_REQUEST ){
 636:	0e c0       	rjmp	.+28     	; 0x654 <TREAT_SENSOR_DATA+0x8e>
						if (TOS_STATE == FULL)
 638:	c0 3e       	cpi	r28, 0xE0	; 224
 63a:	61 f4       	brne	.+24     	; 0x654 <TREAT_SENSOR_DATA+0x8e>
 63c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <TOS_STATE>
						SENSOR_TRANSMIT(TOS);
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	41 f4       	brne	.+16     	; 0x654 <TREAT_SENSOR_DATA+0x8e>
 644:	8d 2f       	mov	r24, r29
 646:	32 de       	rcall	.-924    	; 0x2ac <SENSOR_TRANSMIT>
					}
				}

			} else { // if CRC_CHECK3 fails
				SENSOR_TRANSMIT(0xBB);
 648:	05 c0       	rjmp	.+10     	; 0x654 <TREAT_SENSOR_DATA+0x8e>
 64a:	8b eb       	ldi	r24, 0xBB	; 187
 64c:	2f de       	rcall	.-930    	; 0x2ac <SENSOR_TRANSMIT>
				SENSOR_TRANSMIT(CRC3(REPEAT_REQUEST));
 64e:	80 ee       	ldi	r24, 0xE0	; 224
 650:	44 dd       	rcall	.-1400   	; 0xda <CRC3>
 652:	2c de       	rcall	.-936    	; 0x2ac <SENSOR_TRANSMIT>
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
			}
		}
	}
}
 658:	08 95       	ret

0000065a <__vector_30>:
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
	
	return number;
}

// xbee rx, sensor receive
ISR(USART1_RX_vect) {
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	0b b6       	in	r0, 0x3b	; 59
 666:	0f 92       	push	r0
 668:	2f 93       	push	r18
 66a:	3f 93       	push	r19
 66c:	4f 93       	push	r20
 66e:	5f 93       	push	r21
 670:	6f 93       	push	r22
 672:	7f 93       	push	r23
 674:	8f 93       	push	r24
 676:	9f 93       	push	r25
 678:	af 93       	push	r26
 67a:	bf 93       	push	r27
 67c:	ef 93       	push	r30
 67e:	ff 93       	push	r31
	sleep_disable(); // disable sleep once an interrupt wakes CPU up
 680:	85 b7       	in	r24, 0x35	; 53
 682:	8f 7d       	andi	r24, 0xDF	; 223
 684:	85 bf       	out	0x35, r24	; 53
	
	sensor_input_buffer[sensor_input_buffer_ptr++] = UDR1; // read data into buffer
 686:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__data_end>
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	8e 0f       	add	r24, r30
 68e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__data_end>
 692:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	e1 5c       	subi	r30, 0xC1	; 193
 69a:	fd 4f       	sbci	r31, 0xFD	; 253
 69c:	90 83       	st	Z, r25
	if (sensor_input_buffer_ptr == 2) { // once read both nibbles (full byte)
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	39 f4       	brne	.+14     	; 0x6b0 <__vector_30+0x56>
		sensor_input_buffer_ptr = 0; // reset pointer
 6a2:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__data_end>
		TREAT_SENSOR_DATA(chars_to_hex(sensor_input_buffer)); // send to treat data function
 6a6:	8f e3       	ldi	r24, 0x3F	; 63
 6a8:	92 e0       	ldi	r25, 0x02	; 2
 6aa:	9b de       	rcall	.-714    	; 0x3e2 <chars_to_hex>
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	8b df       	rcall	.-234    	; 0x5c6 <TREAT_SENSOR_DATA>
	}
}
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	bf 91       	pop	r27
 6b6:	af 91       	pop	r26
 6b8:	9f 91       	pop	r25
 6ba:	8f 91       	pop	r24
 6bc:	7f 91       	pop	r23
 6be:	6f 91       	pop	r22
 6c0:	5f 91       	pop	r21
 6c2:	4f 91       	pop	r20
 6c4:	3f 91       	pop	r19
 6c6:	2f 91       	pop	r18
 6c8:	0f 90       	pop	r0
 6ca:	0b be       	out	0x3b, r0	; 59
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <READ_FROM_EEPROM>:
	}
}

// reads and returns a byte from eeprom at address
char READ_FROM_EEPROM(short address){
	while((EECR & (1<<EEWE)) == 2)
 6d6:	e1 9b       	sbis	0x1c, 1	; 28
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <READ_FROM_EEPROM+0x14>
 6da:	ef ec       	ldi	r30, 0xCF	; 207
 6dc:	f7 e0       	ldi	r31, 0x07	; 7
 6de:	31 97       	sbiw	r30, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <READ_FROM_EEPROM+0x8>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <READ_FROM_EEPROM+0xe>
 6e4:	00 00       	nop
 6e6:	e1 99       	sbic	0x1c, 1	; 28
 6e8:	f8 cf       	rjmp	.-16     	; 0x6da <READ_FROM_EEPROM+0x4>
	_delay_ms(1);
	
	EEARH = address&0xFF00;
 6ea:	1f ba       	out	0x1f, r1	; 31
	EEARL = address&0x00FF;
 6ec:	8e bb       	out	0x1e, r24	; 30
	EECR = (1<<EERE);
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 6f2:	8d b3       	in	r24, 0x1d	; 29
}
 6f4:	08 95       	ret

000006f6 <SAVE_TO_EEPROM>:

// writes a byte to eeprom at address
void SAVE_TO_EEPROM(unsigned short address, char data){
	while((EECR & (1<<EEWE)) == 2)
 6f6:	e1 9b       	sbis	0x1c, 1	; 28
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <SAVE_TO_EEPROM+0x14>
 6fa:	ef ec       	ldi	r30, 0xCF	; 207
 6fc:	f7 e0       	ldi	r31, 0x07	; 7
 6fe:	31 97       	sbiw	r30, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <SAVE_TO_EEPROM+0x8>
 702:	00 c0       	rjmp	.+0      	; 0x704 <SAVE_TO_EEPROM+0xe>
 704:	00 00       	nop
 706:	e1 99       	sbic	0x1c, 1	; 28
 708:	f8 cf       	rjmp	.-16     	; 0x6fa <SAVE_TO_EEPROM+0x4>
	_delay_ms(1);
	
	EEARH = address&0xFF00;
 70a:	1f ba       	out	0x1f, r1	; 31
	EEARL = address&0x00FF;
 70c:	8e bb       	out	0x1e, r24	; 30
	
	EEDR = data;
 70e:	6d bb       	out	0x1d, r22	; 29
	EECR = (1<<EEMWE);
 710:	84 e0       	ldi	r24, 0x04	; 4
 712:	8c bb       	out	0x1c, r24	; 28
	EECR = (1<<EEWE);
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	8c bb       	out	0x1c, r24	; 28
 718:	08 95       	ret

0000071a <PROMPT_USER_WD>:
}

// prompts the user to setup timeout and watchdog timers
void PROMPT_USER_WD(){
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
	unsigned short timer = 0;
	
	saved = READ_FROM_EEPROM(0x00); // read whether already setup on eeprom or not
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	d7 df       	rcall	.-82     	; 0x6d6 <READ_FROM_EEPROM>
 728:	80 93 c7 0f 	sts	0x0FC7, r24	; 0x800fc7 <saved>
	wdSaved = saved;
 72c:	80 93 c5 0f 	sts	0x0FC5, r24	; 0x800fc5 <wdSaved>
 730:	d1 e0       	ldi	r29, 0x01	; 1
 732:	c0 e0       	ldi	r28, 0x00	; 0
	EECR = (1<<EEWE);
}

// prompts the user to setup timeout and watchdog timers
void PROMPT_USER_WD(){
	unsigned short timer = 0;
 734:	00 e0       	ldi	r16, 0x00	; 0
 736:	10 e0       	ldi	r17, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <PROMPT_USER_WD+0x24>
 73a:	cf 5f       	subi	r28, 0xFF	; 255
 73c:	df 5f       	subi	r29, 0xFF	; 255
	saved = READ_FROM_EEPROM(0x00); // read whether already setup on eeprom or not
	wdSaved = saved;
	
	// reads previous timer
	for(char i = 0; i < 2; i++){
		timer |= READ_FROM_EEPROM(0x01 + i);
 73e:	8c 2f       	mov	r24, r28
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	c8 df       	rcall	.-112    	; 0x6d6 <READ_FROM_EEPROM>
 746:	08 2b       	or	r16, r24
		if(i == 0)
 748:	c1 11       	cpse	r28, r1
 74a:	03 c0       	rjmp	.+6      	; 0x752 <PROMPT_USER_WD+0x38>
			timer = timer<<8;
 74c:	10 2f       	mov	r17, r16
 74e:	00 27       	eor	r16, r16
 750:	f4 cf       	rjmp	.-24     	; 0x73a <PROMPT_USER_WD+0x20>
	
	saved = READ_FROM_EEPROM(0x00); // read whether already setup on eeprom or not
	wdSaved = saved;
	
	// reads previous timer
	for(char i = 0; i < 2; i++){
 752:	d2 30       	cpi	r29, 0x02	; 2
 754:	90 f3       	brcs	.-28     	; 0x73a <PROMPT_USER_WD+0x20>
		timer |= READ_FROM_EEPROM(0x01 + i);
		if(i == 0)
			timer = timer<<8;
	}
	
	watchdogSetting = READ_FROM_EEPROM(0x02);
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	bd df       	rcall	.-134    	; 0x6d6 <READ_FROM_EEPROM>
 75c:	80 93 c6 0f 	sts	0x0FC6, r24	; 0x800fc6 <watchdogSetting>
	
	if(saved){ // if not saved
 760:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <saved>
 764:	88 23       	and	r24, r24
		USER_TRANSMIT_START("Please enter the timeout duration wanted in (0-8)s (0 to disable): ");
 766:	61 f0       	breq	.+24     	; 0x780 <PROMPT_USER_WD+0x66>
 768:	8b e7       	ldi	r24, 0x7B	; 123
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	6c de       	rcall	.-808    	; 0x446 <USER_TRANSMIT_START>
		timeOutCount = 0;
 76e:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <timeOutCount+0x1>
 772:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <timeOutCount>
		}else{ // if saved, use previous read counter timer
		timeOutCount = timer;
	}
	
	while(saved){ // waits until user inputs and sets up timers
 776:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <saved>
 77a:	81 11       	cpse	r24, r1
 77c:	06 c0       	rjmp	.+12     	; 0x78a <PROMPT_USER_WD+0x70>
 77e:	0d c0       	rjmp	.+26     	; 0x79a <PROMPT_USER_WD+0x80>
	
	if(saved){ // if not saved
		USER_TRANSMIT_START("Please enter the timeout duration wanted in (0-8)s (0 to disable): ");
		timeOutCount = 0;
		}else{ // if saved, use previous read counter timer
		timeOutCount = timer;
 780:	10 93 3a 02 	sts	0x023A, r17	; 0x80023a <timeOutCount+0x1>
 784:	00 93 39 02 	sts	0x0239, r16	; 0x800239 <timeOutCount>
 788:	08 c0       	rjmp	.+16     	; 0x79a <PROMPT_USER_WD+0x80>
	}
	
	while(saved){ // waits until user inputs and sets up timers
		sleep_enable(); // arm sleep mode
 78a:	85 b7       	in	r24, 0x35	; 53
 78c:	80 62       	ori	r24, 0x20	; 32
 78e:	85 bf       	out	0x35, r24	; 53
		sleep_cpu(); // put CPU to sleep
 790:	88 95       	sleep
		timeOutCount = 0;
		}else{ // if saved, use previous read counter timer
		timeOutCount = timer;
	}
	
	while(saved){ // waits until user inputs and sets up timers
 792:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <saved>
 796:	81 11       	cpse	r24, r1
 798:	f8 cf       	rjmp	.-16     	; 0x78a <PROMPT_USER_WD+0x70>
		sleep_enable(); // arm sleep mode
		sleep_cpu(); // put CPU to sleep
	}
	
	if(wdSaved){ // if not saved
 79a:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <wdSaved>
 79e:	88 23       	and	r24, r24
		USER_TRANSMIT_START("Please enter the watchdog timer duration wanted in (0-8)s (0 to disable): ");
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <PROMPT_USER_WD+0xa6>
 7a2:	8f eb       	ldi	r24, 0xBF	; 191
 7a4:	91 e0       	ldi	r25, 0x01	; 1
 7a6:	4f de       	rcall	.-866    	; 0x446 <USER_TRANSMIT_START>
	}
	
	while(wdSaved){ // waits until user inputs and sets up timers
 7a8:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <wdSaved>
 7ac:	88 23       	and	r24, r24
 7ae:	41 f0       	breq	.+16     	; 0x7c0 <PROMPT_USER_WD+0xa6>
		sleep_enable(); // arm sleep mode
 7b0:	85 b7       	in	r24, 0x35	; 53
 7b2:	80 62       	ori	r24, 0x20	; 32
 7b4:	85 bf       	out	0x35, r24	; 53
		sleep_cpu(); // put CPU to sleep
 7b6:	88 95       	sleep
	
	if(wdSaved){ // if not saved
		USER_TRANSMIT_START("Please enter the watchdog timer duration wanted in (0-8)s (0 to disable): ");
	}
	
	while(wdSaved){ // waits until user inputs and sets up timers
 7b8:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <wdSaved>
 7bc:	81 11       	cpse	r24, r1
		sleep_enable(); // arm sleep mode
		sleep_cpu(); // put CPU to sleep
	}
	
	// saves settings to eeprom
	USER_TRANSMIT_START("Saving settings");
 7be:	f8 cf       	rjmp	.-16     	; 0x7b0 <PROMPT_USER_WD+0x96>
 7c0:	8a e0       	ldi	r24, 0x0A	; 10
 7c2:	92 e0       	ldi	r25, 0x02	; 2
	// writing saved and timer settings
	SAVE_TO_EEPROM(0x00, 0x00);
 7c4:	40 de       	rcall	.-896    	; 0x446 <USER_TRANSMIT_START>
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	90 e0       	ldi	r25, 0x00	; 0
	SAVE_TO_EEPROM(0x01, (timeOutCount&0xFF00)>>8);
 7cc:	94 df       	rcall	.-216    	; 0x6f6 <SAVE_TO_EEPROM>
 7ce:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <timeOutCount+0x1>
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
	SAVE_TO_EEPROM(0x02, (timeOutCount&0x00FF));
 7d6:	8f df       	rcall	.-226    	; 0x6f6 <SAVE_TO_EEPROM>
 7d8:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <timeOutCount>
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	90 e0       	ldi	r25, 0x00	; 0
	SAVE_TO_EEPROM(0x03, watchdogSetting);
 7e0:	8a df       	rcall	.-236    	; 0x6f6 <SAVE_TO_EEPROM>
 7e2:	60 91 c6 0f 	lds	r22, 0x0FC6	; 0x800fc6 <watchdogSetting>
 7e6:	83 e0       	ldi	r24, 0x03	; 3
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	85 df       	rcall	.-246    	; 0x6f6 <SAVE_TO_EEPROM>
	timeOutCount = 65536 - timeOutCount;
 7ec:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timeOutCount>
 7f0:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <timeOutCount+0x1>
 7f4:	91 95       	neg	r25
 7f6:	81 95       	neg	r24
 7f8:	91 09       	sbc	r25, r1
 7fa:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <timeOutCount+0x1>
 7fe:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <timeOutCount>
}
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	08 95       	ret

0000080c <enableWD>:

void enableWD(){
	char sub;
	switch (watchdogSetting){
 80c:	e0 91 c6 0f 	lds	r30, 0x0FC6	; 0x800fc6 <watchdogSetting>
 810:	8e 2f       	mov	r24, r30
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	89 30       	cpi	r24, 0x09	; 9
 816:	91 05       	cpc	r25, r1
 818:	d8 f4       	brcc	.+54     	; 0x850 <enableWD+0x44>
 81a:	fc 01       	movw	r30, r24
 81c:	ea 5b       	subi	r30, 0xBA	; 186
 81e:	ff 4f       	sbci	r31, 0xFF	; 255
 820:	c7 c0       	rjmp	.+398    	; 0x9b0 <__tablejump2__>
		break;
		case 2:
		sub = WDTO_30MS;
		break;
		case 3:
		sub = WDTO_60MS;
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	07 c0       	rjmp	.+14     	; 0x834 <enableWD+0x28>
		break;
		case 4:
		sub = WDTO_120MS;
		break;
		case 5:
		sub = WDTO_250MS;
 826:	84 e0       	ldi	r24, 0x04	; 4
		break;
 828:	05 c0       	rjmp	.+10     	; 0x834 <enableWD+0x28>
		case 6:
		sub = WDTO_500MS;
 82a:	85 e0       	ldi	r24, 0x05	; 5
		break;
 82c:	03 c0       	rjmp	.+6      	; 0x834 <enableWD+0x28>
		case 7:
		sub = WDTO_1S;
 82e:	86 e0       	ldi	r24, 0x06	; 6
		break;
 830:	01 c0       	rjmp	.+2      	; 0x834 <enableWD+0x28>
		case 8:
		sub = WDTO_2S;
 832:	87 e0       	ldi	r24, 0x07	; 7
		break;
	}
	if(sub){
		PORTB |= 0x01; // shows you that watchdog is armed
 834:	c0 9a       	sbi	0x18, 0	; 24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 836:	88 60       	ori	r24, 0x08	; 8
 838:	98 e1       	ldi	r25, 0x18	; 24
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	a8 95       	wdr
 840:	91 bd       	out	0x21, r25	; 33
 842:	0f be       	out	0x3f, r0	; 63
 844:	81 bd       	out	0x21, r24	; 33
		wdt_enable(sub);
	}
}
 846:	08 95       	ret
		break;
		case 1:
		sub = WDTO_15MS;
		break;
		case 2:
		sub = WDTO_30MS;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	f4 cf       	rjmp	.-24     	; 0x834 <enableWD+0x28>
		break;
		case 3:
		sub = WDTO_60MS;
		break;
		case 4:
		sub = WDTO_120MS;
 84c:	83 e0       	ldi	r24, 0x03	; 3
 84e:	f2 cf       	rjmp	.-28     	; 0x834 <enableWD+0x28>
 850:	08 95       	ret

00000852 <startI>:
	}
}

// reset and restart procedure
void startI(void){
	SYS_CONFIG(); // configure the system
 852:	0c dd       	rcall	.-1512   	; 0x26c <SYS_CONFIG>
	PROMPT_USER_WD(); // prompt the user for timer setup if not setup
 854:	62 df       	rcall	.-316    	; 0x71a <PROMPT_USER_WD>
	INIT(); // initializes and reset the sensors
 856:	7f de       	rcall	.-770    	; 0x556 <INIT>
	USER_TRANSMIT_START("\rEnter choice (and period): 1-Mem Dump 2-Last Entry 3-Restart \0"); // prints menu
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	91 e0       	ldi	r25, 0x01	; 1
 85c:	f4 cd       	rjmp	.-1048   	; 0x446 <USER_TRANSMIT_START>
 85e:	08 95       	ret

00000860 <__vector_18>:
 860:	1f 92       	push	r1
char user_input_buffer [5];
char user_input_buffer_ptr = 0;

// bluetooth rx
// data register empty
ISR(USART0_RX_vect) {
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	0b b6       	in	r0, 0x3b	; 59
 86c:	0f 92       	push	r0
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
	sleep_disable(); // disable sleep once an interrupt wakes CPU up
 88a:	85 b7       	in	r24, 0x35	; 53
 88c:	8f 7d       	andi	r24, 0xDF	; 223
 88e:	85 bf       	out	0x35, r24	; 53
	
	// reset wd timer
	wdt_reset();
 890:	a8 95       	wdr
	
	// read one byte from the usart register and roll the buffer pointer
	user_input_buffer[user_input_buffer_ptr++] = UDR0;
 892:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <user_input_buffer_ptr>
 896:	e1 e0       	ldi	r30, 0x01	; 1
 898:	ea 0f       	add	r30, r26
 89a:	e0 93 38 02 	sts	0x0238, r30	; 0x800238 <user_input_buffer_ptr>
 89e:	8c b1       	in	r24, 0x0c	; 12
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	af 5b       	subi	r26, 0xBF	; 191
 8a4:	bd 4f       	sbci	r27, 0xFD	; 253
 8a6:	8c 93       	st	X, r24
	// if the read byte is a '.' command is issued
	if (user_input_buffer[user_input_buffer_ptr - 1] == '.') {
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	e0 5c       	subi	r30, 0xC0	; 192
 8ac:	fd 4f       	sbci	r31, 0xFD	; 253
 8ae:	80 81       	ld	r24, Z
 8b0:	8e 32       	cpi	r24, 0x2E	; 46
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__vector_18+0x56>
 8b4:	61 c0       	rjmp	.+194    	; 0x978 <__vector_18+0x118>
		// checks if timeout and wd timers are setup, if not, it expects them to be the first inputs by the user
		if(saved){
 8b6:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <saved>
 8ba:	88 23       	and	r24, r24
 8bc:	91 f1       	breq	.+100    	; 0x922 <__vector_18+0xc2>
			// checks the validity of user input
			if(user_input_buffer[0] < '8' && user_input_buffer[0] >= '0'){
 8be:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <user_input_buffer>
 8c2:	80 53       	subi	r24, 0x30	; 48
 8c4:	88 30       	cpi	r24, 0x08	; 8
 8c6:	08 f0       	brcs	.+2      	; 0x8ca <__vector_18+0x6a>
 8c8:	55 c0       	rjmp	.+170    	; 0x974 <__vector_18+0x114>
				// notify user, calculate the timer counter and set saved
				USER_TRANSMIT_START("RECEIVED");
 8ca:	8a e1       	ldi	r24, 0x1A	; 26
 8cc:	92 e0       	ldi	r25, 0x02	; 2
 8ce:	bb dd       	rcall	.-1162   	; 0x446 <USER_TRANSMIT_START>
				timeOutCount = (user_input_buffer[0] - '0') * 8 * 1000000 / 1024;
 8d0:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <user_input_buffer>
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	d0 97       	sbiw	r26, 0x30	; 48
 8d8:	aa 0f       	add	r26, r26
 8da:	bb 1f       	adc	r27, r27
 8dc:	aa 0f       	add	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	aa 0f       	add	r26, r26
 8e2:	bb 1f       	adc	r27, r27
 8e4:	20 e4       	ldi	r18, 0x40	; 64
 8e6:	32 e4       	ldi	r19, 0x42	; 66
 8e8:	4f e0       	ldi	r20, 0x0F	; 15
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	6a d0       	rcall	.+212    	; 0x9c2 <__mulshisi3>
 8ee:	8b 01       	movw	r16, r22
 8f0:	9c 01       	movw	r18, r24
 8f2:	99 23       	and	r25, r25
 8f4:	24 f4       	brge	.+8      	; 0x8fe <__vector_18+0x9e>
 8f6:	01 50       	subi	r16, 0x01	; 1
 8f8:	1c 4f       	sbci	r17, 0xFC	; 252
 8fa:	2f 4f       	sbci	r18, 0xFF	; 255
 8fc:	3f 4f       	sbci	r19, 0xFF	; 255
 8fe:	d9 01       	movw	r26, r18
 900:	c8 01       	movw	r24, r16
 902:	07 2e       	mov	r0, r23
 904:	7a e0       	ldi	r23, 0x0A	; 10
 906:	b5 95       	asr	r27
 908:	a7 95       	ror	r26
 90a:	97 95       	ror	r25
 90c:	87 95       	ror	r24
 90e:	7a 95       	dec	r23
 910:	d1 f7       	brne	.-12     	; 0x906 <__vector_18+0xa6>
 912:	70 2d       	mov	r23, r0
 914:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <timeOutCount+0x1>
 918:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <timeOutCount>
				saved = 0;
 91c:	10 92 c7 0f 	sts	0x0FC7, r1	; 0x800fc7 <saved>
 920:	29 c0       	rjmp	.+82     	; 0x974 <__vector_18+0x114>
			}
		}
		else if(wdSaved){ // expects wd setup second// checks the validity of user input
 922:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <wdSaved>
 926:	88 23       	and	r24, r24
 928:	81 f0       	breq	.+32     	; 0x94a <__vector_18+0xea>
			if(user_input_buffer[0] < '8' && user_input_buffer[0] >= '0'){
 92a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <user_input_buffer>
 92e:	80 53       	subi	r24, 0x30	; 48
 930:	88 30       	cpi	r24, 0x08	; 8
 932:	00 f5       	brcc	.+64     	; 0x974 <__vector_18+0x114>
				// notify user, calculate the timer counter and set saved
				USER_TRANSMIT_START("RECEIVED");
 934:	8a e1       	ldi	r24, 0x1A	; 26
 936:	92 e0       	ldi	r25, 0x02	; 2
 938:	86 dd       	rcall	.-1268   	; 0x446 <USER_TRANSMIT_START>
				watchdogSetting = user_input_buffer[0] - '0';
 93a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <user_input_buffer>
 93e:	80 53       	subi	r24, 0x30	; 48
 940:	80 93 c6 0f 	sts	0x0FC6, r24	; 0x800fc6 <watchdogSetting>
				wdSaved = 0;
 944:	10 92 c5 0f 	sts	0x0FC5, r1	; 0x800fc5 <wdSaved>
 948:	15 c0       	rjmp	.+42     	; 0x974 <__vector_18+0x114>
			}
		}
		else{ // normal operation command
			char number = user_input_buffer[0];
			switch (number){
 94a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <user_input_buffer>
 94e:	82 33       	cpi	r24, 0x32	; 50
 950:	41 f0       	breq	.+16     	; 0x962 <__vector_18+0x102>
 952:	83 33       	cpi	r24, 0x33	; 51
 954:	51 f0       	breq	.+20     	; 0x96a <__vector_18+0x10a>
 956:	81 33       	cpi	r24, 0x31	; 49
				// mem dump
				case '1':
				sei(); // interrupts are reenabled since service readout relies on them
 958:	51 f4       	brne	.+20     	; 0x96e <__vector_18+0x10e>
				SERVICE_READOUT(0);
 95a:	78 94       	sei
 95c:	80 e0       	ldi	r24, 0x00	; 0
				break;
 95e:	9b dd       	rcall	.-1226   	; 0x496 <SERVICE_READOUT>
				// last entry
				case '2':
				sei(); // interrupts are reenabled since service readout relies on them
				SERVICE_READOUT(1);
 960:	09 c0       	rjmp	.+18     	; 0x974 <__vector_18+0x114>
 962:	78 94       	sei
 964:	81 e0       	ldi	r24, 0x01	; 1
				break;
				// reset
				case '3':
				startI();
 966:	97 dd       	rcall	.-1234   	; 0x496 <SERVICE_READOUT>
 968:	05 c0       	rjmp	.+10     	; 0x974 <__vector_18+0x114>
				break;
 96a:	73 df       	rcall	.-282    	; 0x852 <startI>
				// unknown command
				default:
				USER_TRANSMIT_START("Invalid command");
 96c:	03 c0       	rjmp	.+6      	; 0x974 <__vector_18+0x114>
 96e:	83 e2       	ldi	r24, 0x23	; 35
 970:	92 e0       	ldi	r25, 0x02	; 2
 972:	69 dd       	rcall	.-1326   	; 0x446 <USER_TRANSMIT_START>
				break;
			}
		}
		// reset pointer to 0
		user_input_buffer_ptr = 0;
 974:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <user_input_buffer_ptr>
	}
}
 978:	ff 91       	pop	r31
 97a:	ef 91       	pop	r30
 97c:	bf 91       	pop	r27
 97e:	af 91       	pop	r26
 980:	9f 91       	pop	r25
 982:	8f 91       	pop	r24
 984:	7f 91       	pop	r23
 986:	6f 91       	pop	r22
 988:	5f 91       	pop	r21
 98a:	4f 91       	pop	r20
 98c:	3f 91       	pop	r19
 98e:	2f 91       	pop	r18
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	0f 90       	pop	r0
 996:	0b be       	out	0x3b, r0	; 59
 998:	0f 90       	pop	r0
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	0f 90       	pop	r0
 99e:	1f 90       	pop	r1
 9a0:	18 95       	reti

000009a2 <main>:
	// reset eeprom, ONLY for demo purposes!
	/*SAVE_TO_EEPROM(0xFF, 0x00);
	SAVE_TO_EEPROM(0x01, 0x00);
	SAVE_TO_EEPROM(0x02, 0x00);*/
	
	startI();
 9a2:	57 df       	rcall	.-338    	; 0x852 <startI>
	
	enableWD(); // enables watchdog timer if setup
 9a4:	33 df       	rcall	.-410    	; 0x80c <enableWD>
 9a6:	85 b7       	in	r24, 0x35	; 53
	while(1){ // waits for user or sensor interrupts
		sleep_enable(); // arm sleep mode
 9a8:	80 62       	ori	r24, 0x20	; 32
 9aa:	85 bf       	out	0x35, r24	; 53
 9ac:	88 95       	sleep
		sleep_cpu(); // put CPU to sleep
 9ae:	fb cf       	rjmp	.-10     	; 0x9a6 <main+0x4>

000009b0 <__tablejump2__>:
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	00 24       	eor	r0, r0
 9b6:	00 1c       	adc	r0, r0
 9b8:	0b be       	out	0x3b, r0	; 59
 9ba:	07 90       	elpm	r0, Z+
 9bc:	f6 91       	elpm	r31, Z
 9be:	e0 2d       	mov	r30, r0
 9c0:	09 94       	ijmp

000009c2 <__mulshisi3>:
 9c2:	b7 ff       	sbrs	r27, 7
 9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__muluhisi3>

000009c6 <__mulohisi3>:
 9c6:	03 d0       	rcall	.+6      	; 0x9ce <__muluhisi3>
 9c8:	82 1b       	sub	r24, r18
 9ca:	93 0b       	sbc	r25, r19
 9cc:	08 95       	ret

000009ce <__muluhisi3>:
 9ce:	09 d0       	rcall	.+18     	; 0x9e2 <__umulhisi3>
 9d0:	a5 9f       	mul	r26, r21
 9d2:	90 0d       	add	r25, r0
 9d4:	b4 9f       	mul	r27, r20
 9d6:	90 0d       	add	r25, r0
 9d8:	a4 9f       	mul	r26, r20
 9da:	80 0d       	add	r24, r0
 9dc:	91 1d       	adc	r25, r1
 9de:	11 24       	eor	r1, r1
 9e0:	08 95       	ret

000009e2 <__umulhisi3>:
 9e2:	a2 9f       	mul	r26, r18
 9e4:	b0 01       	movw	r22, r0
 9e6:	b3 9f       	mul	r27, r19
 9e8:	c0 01       	movw	r24, r0
 9ea:	a3 9f       	mul	r26, r19
 9ec:	70 0d       	add	r23, r0
 9ee:	81 1d       	adc	r24, r1
 9f0:	11 24       	eor	r1, r1
 9f2:	91 1d       	adc	r25, r1
 9f4:	b2 9f       	mul	r27, r18
 9f6:	70 0d       	add	r23, r0
 9f8:	81 1d       	adc	r24, r1
 9fa:	11 24       	eor	r1, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	08 95       	ret

00000a00 <strcpy>:
 a00:	fb 01       	movw	r30, r22
 a02:	dc 01       	movw	r26, r24
 a04:	01 90       	ld	r0, Z+
 a06:	0d 92       	st	X+, r0
 a08:	00 20       	and	r0, r0
 a0a:	e1 f7       	brne	.-8      	; 0xa04 <strcpy+0x4>
 a0c:	08 95       	ret

00000a0e <_exit>:
 a0e:	f8 94       	cli

00000a10 <__stop_program>:
 a10:	ff cf       	rjmp	.-2      	; 0xa10 <__stop_program>
