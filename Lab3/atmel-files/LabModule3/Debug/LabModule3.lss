
LabModule3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000988  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000376  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e6  00000000  00000000  00001bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	46 d0       	rcall	.+140    	; 0x136 <main>
  aa:	50 c0       	rjmp	.+160    	; 0x14c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <CRC_CHECK11>:
	
	return return_value;
}

unsigned char CRC_CHECK11(unsigned char command) {
	unsigned char data = TOS;
  ae:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	unsigned char org_com = command, org_dat = data, temp;
	
	command = command & 0xE0;// isolate first 3 bits, 11100000
  b2:	80 7e       	andi	r24, 0xE0	; 224
	// packet DDDDDDDD
	
	temp = data & 0b11;
	// temp   000000DD
	
	temp = temp<<6;
  b4:	26 2f       	mov	r18, r22
  b6:	22 95       	swap	r18
  b8:	22 0f       	add	r18, r18
  ba:	22 0f       	add	r18, r18
  bc:	20 7c       	andi	r18, 0xC0	; 192
	// temp	  DD000000
	
	data = data>>2; // align with polynomial
  be:	66 95       	lsr	r22
  c0:	66 95       	lsr	r22
	// data   00DDDDDD
	
	if( data >= 0x20 )
  c2:	60 32       	cpi	r22, 0x20	; 32
  c4:	10 f0       	brcs	.+4      	; 0xca <CRC_CHECK11+0x1c>
	data ^= gen;
  c6:	95 e3       	ldi	r25, 0x35	; 53
  c8:	69 27       	eor	r22, r25
	
	data = data<<1 | temp>> 7; // data 0DDDDDDT (lsb of data from temp)
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	42 2f       	mov	r20, r18
  d2:	44 1f       	adc	r20, r20
  d4:	44 27       	eor	r20, r20
  d6:	44 1f       	adc	r20, r20
  d8:	64 2b       	or	r22, r20
	temp = temp<<1; // T0000000
  da:	22 0f       	add	r18, r18
	if( data >= 0x20 )
  dc:	60 32       	cpi	r22, 0x20	; 32
  de:	10 f0       	brcs	.+4      	; 0xe4 <CRC_CHECK11+0x36>
	data ^= gen;
  e0:	95 e3       	ldi	r25, 0x35	; 53
  e2:	69 27       	eor	r22, r25
	
	
	data = data<<1 | temp>>6; // data DDDDDDTT ( lsb of data from temp)
  e4:	46 2f       	mov	r20, r22
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	22 95       	swap	r18
  ee:	26 95       	lsr	r18
  f0:	26 95       	lsr	r18
  f2:	23 70       	andi	r18, 0x03	; 3
  f4:	24 2b       	or	r18, r20
	if( data >= 0x20 )
  f6:	20 32       	cpi	r18, 0x20	; 32
  f8:	10 f0       	brcs	.+4      	; 0xfe <CRC_CHECK11+0x50>
	data ^= gen;
  fa:	95 e3       	ldi	r25, 0x35	; 53
  fc:	29 27       	eor	r18, r25
	return_value = 0xFF;
	
	return return_value;
}

unsigned char CRC_CHECK11(unsigned char command) {
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	0f c0       	rjmp	.+30     	; 0x122 <CRC_CHECK11+0x74>
	if( data >= 0x20 )
	data ^= gen;
	
	// data DDDDDDDD
	for (int i=0; i < 8; i++){
		data = data<<1 | command>> 7;// data DDDDDDDC
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	48 2f       	mov	r20, r24
 10c:	44 1f       	adc	r20, r20
 10e:	44 27       	eor	r20, r20
 110:	44 1f       	adc	r20, r20
 112:	24 2b       	or	r18, r20
		command = command<<1;		// cmd CCCCCCC0
 114:	88 0f       	add	r24, r24
		if ( data >= 0x20 )
 116:	20 32       	cpi	r18, 0x20	; 32
 118:	10 f0       	brcs	.+4      	; 0x11e <CRC_CHECK11+0x70>
		data ^= gen;
 11a:	95 e3       	ldi	r25, 0x35	; 53
 11c:	29 27       	eor	r18, r25
	data = data<<1 | temp>>6; // data DDDDDDTT ( lsb of data from temp)
	if( data >= 0x20 )
	data ^= gen;
	
	// data DDDDDDDD
	for (int i=0; i < 8; i++){
 11e:	6f 5f       	subi	r22, 0xFF	; 255
 120:	7f 4f       	sbci	r23, 0xFF	; 255
 122:	68 30       	cpi	r22, 0x08	; 8
 124:	71 05       	cpc	r23, r1
 126:	74 f3       	brlt	.-36     	; 0x104 <CRC_CHECK11+0x56>
	}
	
	// data variable now holds the remainder, 5 bits long
	// we will now check if the CRC which we obtained matches [4:0] in command variable
	unsigned char return_value = 0x00;
	if (data == (command&0x1F))
 128:	8f 71       	andi	r24, 0x1F	; 31
 12a:	28 17       	cp	r18, r24
 12c:	11 f0       	breq	.+4      	; 0x132 <CRC_CHECK11+0x84>
		data ^= gen;
	}
	
	// data variable now holds the remainder, 5 bits long
	// we will now check if the CRC which we obtained matches [4:0] in command variable
	unsigned char return_value = 0x00;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
	if (data == (command&0x1F))
	return_value = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
	return return_value;
	
 134:	08 95       	ret

00000136 <main>:

int main(void) {
	//unsigned char command = 0xE0;
	//command = CRC3(command);
	//int a = 2+3;
	DDRB = 0xFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	87 bb       	out	0x17, r24	; 23
	TOS = 0x80;
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	unsigned char input = 0x80;
	PORTB = input;
 140:	88 bb       	out	0x18, r24	; 24
	input = CRC_CHECK11(input);
 142:	b5 df       	rcall	.-150    	; 0xae <CRC_CHECK11>
	PORTB = input;
 144:	88 bb       	out	0x18, r24	; 24
	//while (1) {
	//	PORTB = input;
	//}
	
 }
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
