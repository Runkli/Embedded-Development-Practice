
LabModule3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cfd  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005db  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034a  00000000  00000000  0000251e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4a d0       	rcall	.+148    	; 0x13e <main>
  aa:	51 c0       	rjmp	.+162    	; 0x14e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <CRC3>:
}


// incomplete
void TREAT_USER_INPUT(){
	SERVICE_READOUT();
  ae:	98 2f       	mov	r25, r24
  b0:	90 7e       	andi	r25, 0xE0	; 224
  b2:	96 95       	lsr	r25
  b4:	96 95       	lsr	r25
  b6:	90 32       	cpi	r25, 0x20	; 32
  b8:	10 f0       	brcs	.+4      	; 0xbe <CRC3+0x10>
  ba:	25 e3       	ldi	r18, 0x35	; 53
  bc:	92 27       	eor	r25, r18
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <CRC3+0x24>
  c4:	99 0f       	add	r25, r25
  c6:	90 32       	cpi	r25, 0x20	; 32
  c8:	10 f0       	brcs	.+4      	; 0xce <CRC3+0x20>
  ca:	45 e3       	ldi	r20, 0x35	; 53
  cc:	94 27       	eor	r25, r20
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	22 30       	cpi	r18, 0x02	; 2
  d4:	31 05       	cpc	r19, r1
  d6:	b4 f3       	brlt	.-20     	; 0xc4 <CRC3+0x16>
  d8:	89 2b       	or	r24, r25
  da:	08 95       	ret

000000dc <SYS_CONFIG>:
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	85 bf       	out	0x35, r24	; 53
  e0:	26 e0       	ldi	r18, 0x06	; 6
  e2:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  ea:	93 e3       	ldi	r25, 0x33	; 51
  ec:	99 b9       	out	0x09, r25	; 9
  ee:	88 ed       	ldi	r24, 0xD8	; 216
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	20 93 9d 00 	sts	0x009D, r18	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  f6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  fa:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  fe:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <SENSOR_TRANSMIT>:
 106:	d3 df       	rcall	.-90     	; 0xae <CRC3>
 108:	09 c0       	rjmp	.+18     	; 0x11c <SENSOR_TRANSMIT+0x16>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	30 e7       	ldi	r19, 0x70	; 112
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	21 50       	subi	r18, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <SENSOR_TRANSMIT+0xa>
 118:	00 c0       	rjmp	.+0      	; 0x11a <SENSOR_TRANSMIT+0x14>
 11a:	00 00       	nop
 11c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 120:	95 ff       	sbrs	r25, 5
 122:	f3 cf       	rjmp	.-26     	; 0x10a <SENSOR_TRANSMIT+0x4>
 124:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 128:	08 95       	ret

0000012a <INIT>:
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	ec df       	rcall	.-40     	; 0x106 <SENSOR_TRANSMIT>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	be df       	rcall	.-132    	; 0xae <CRC3>
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TOS>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	08 95       	ret

0000013e <main>:
}

#if 1 // 1 for project, 0 for bottom main function to use as test bench
int main(void) {
	SYS_CONFIG();
 13e:	ce df       	rcall	.-100    	; 0xdc <SYS_CONFIG>
	INIT();
 140:	f4 df       	rcall	.-24     	; 0x12a <INIT>
 142:	85 b7       	in	r24, 0x35	; 53
	
	while(1){
		sleep_enable(); // arm sleep mode
 144:	80 62       	ori	r24, 0x20	; 32
 146:	85 bf       	out	0x35, r24	; 53
 148:	78 94       	sei
		sei(); // global interrupt enable
 14a:	88 95       	sleep
		sleep_cpu(); // put CPU to sleep
 14c:	fa cf       	rjmp	.-12     	; 0x142 <main+0x4>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
